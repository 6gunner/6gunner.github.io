(window.webpackJsonp=window.webpackJsonp||[]).push([[107],{467:function(v,_,t){"use strict";t.r(_);var s=t(25),a=Object(s.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h2",{attrs:{id:"微服务架构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#微服务架构"}},[v._v("#")]),v._v(" 微服务架构")]),v._v(" "),t("h3",{attrs:{id:"微服务架构概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#微服务架构概述"}},[v._v("#")]),v._v(" 微服务架构概述")]),v._v(" "),t("img",{staticStyle:{zoom:"43%"},attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2019-09-15-015353.png",alt:"image-20190915095352570"}}),v._v(" "),t("p",[t("strong",[v._v("Q1:独立部署给业务带来什么好处？")])]),v._v(" "),t("p",[v._v("服务可以根据业务划分，不同业务之间可以独立开发，分开上线。")]),v._v(" "),t("p",[v._v("和集中化部署相比，不会依赖于整体业务开发完成才能上线，业务拓展能力比较强。")]),v._v(" "),t("p",[v._v("可以频繁发布不同的服务，同时保持系统其他部分可用。")]),v._v(" "),t("p",[v._v("每个微服务团队能够选择自己擅长的技术栈；")]),v._v(" "),t("h3",{attrs:{id:"微服务与soa的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#微服务与soa的区别"}},[v._v("#")]),v._v(" 微服务与SOA的区别")]),v._v(" "),t("p",[t("strong",[v._v("SOA")]),v._v("：面向服务的架构。服务之间通过相互依赖最终提供一系列的功能。每个服务独立存在于系统之中，各个服务之间通过网络调用。")]),v._v(" "),t("p",[t("strong",[v._v("微服务")]),v._v("：它和SOA类似，是在SOA的基础上做的升华。但微服务架构强调的重点是==业务需要彻底的组件化和服务化==。业务需要更细粒度的拆分成可以独立开发、运行、部署的小应用。")]),v._v(" "),t("p",[t("strong",[v._v("主要区别")])]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[v._v("区别点")]),v._v(" "),t("th",[v._v("SOA")]),v._v(" "),t("th",[v._v("微服务")])])]),v._v(" "),t("tbody",[t("tr",[t("td",[t("strong",[v._v("拆分依据")])]),v._v(" "),t("td",[v._v("大块业务逻辑")]),v._v(" "),t("td",[v._v("单独任务、小块业务逻辑")])]),v._v(" "),t("tr",[t("td",[t("strong",[v._v("耦合")])]),v._v(" "),t("td",[v._v("通常是松耦合")]),v._v(" "),t("td",[v._v("总是松耦合，高内聚")])]),v._v(" "),t("tr",[t("td",[t("strong",[v._v("适用公司架构")])]),v._v(" "),t("td",[v._v("任何类型")]),v._v(" "),t("td",[v._v("小型、专注于功能交叉的团队")])]),v._v(" "),t("tr",[t("td",[t("strong",[v._v("服务管理")])]),v._v(" "),t("td",[v._v("集中管理")]),v._v(" "),t("td",[v._v("分散管理")])])])]),v._v(" "),t("h3",{attrs:{id:"微服务的利与弊"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#微服务的利与弊"}},[v._v("#")]),v._v(" 微服务的利与弊")]),v._v(" "),t("p",[t("strong",[v._v("利")])]),v._v(" "),t("ul",[t("li",[v._v("可以用微服务的模式来模块化开发业务，让每个团队的边界都很清晰，相互调用；")]),v._v(" "),t("li",[v._v("可以独立部署服务")]),v._v(" "),t("li",[v._v("技术可以多样性，每个团队可以用自己擅长的技术；")])]),v._v(" "),t("p",[t("strong",[v._v("弊")])]),v._v(" "),t("ul",[t("li",[v._v("分布式服务一般都很复杂；")]),v._v(" "),t("li",[v._v("测试复杂性很高；")]),v._v(" "),t("li",[v._v("最终一致性:  每个团队开发的服务，数据需要保证一致，所以需要同步。")]),v._v(" "),t("li",[v._v("运维部署很复杂，维护稳定性也很困难，对运维的要求也很高。要有固定的docker容器，也要有故障演练；")])]),v._v(" "),t("h2",{attrs:{id:"企业何时引入微服务架构？"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#企业何时引入微服务架构？"}},[v._v("#")]),v._v(" "),t("strong",[v._v("企业何时引入微服务架构？")])]),v._v(" "),t("blockquote",[t("p",[v._v("好的微服务架构是演变出来的，不是设计出来的；")]),v._v(" "),t("p",[v._v("应该设计一个合理的框架，在这个框架下可以慢慢演变出正确的系统；")])]),v._v(" "),t("p",[t("strong",[v._v("前期不建议直接上手微服务")]),v._v("：")]),v._v(" "),t("p",[v._v("1.是前期对业务理解不深，业务不好拆分，而且系统一开始也不会很复杂；")]),v._v(" "),t("p",[v._v("2.是前期微服务投入成本过高，甚至业务模式都没被商业认证，可能开发出来都不会被市场接受，采用微服务代价太大。")]),v._v(" "),t("p",[v._v("3.前期微服务复杂度高，生产力并不高，应该在业务发展的过程中，找到一个点去切换微服务；")]),v._v(" "),t("p",[t("strong",[v._v("中期逐渐转化成微服务")]),v._v("：")]),v._v(" "),t("p",[v._v("1.业务务不断拓展，复杂度增加，产品本身的生产力会下降")]),v._v(" "),t("p",[v._v("2.团队规模不断扩大，可以有更多的人投入到微服务上；")]),v._v(" "),t("p",[t("strong",[v._v("总结：")])]),v._v(" "),t("p",[v._v("过早的将一个系统划分成为微服务的代价非常高，尤其是面对新领域的时候。很多时候，将一个已有的系统划分成为微服务，要比从头开始构建微服务简单的多；")]),v._v(" "),t("h3",{attrs:{id:"演进式架构师应该承担的职责"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#演进式架构师应该承担的职责"}},[v._v("#")]),v._v(" 演进式架构师应该承担的职责")]),v._v(" "),t("ul",[t("li",[t("p",[t("strong",[v._v("愿景")])]),v._v(" "),t("p",[v._v("确保在系统级有一个经过充分沟通的技术愿景，这个愿景应该可以帮助你满足客户和组织的需求；")])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("同理心")])]),v._v(" "),t("p",[v._v("理解你所做的决定对客户和同事带来的影响；")])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("合作")])]),v._v(" "),t("p",[v._v("和尽量多的同事进行沟通，从而更好地对愿景进行定义、修订以及执行")])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("适应性")])]),v._v(" "),t("p",[v._v("确保在你的客户和组织需要的时候，调整基数愿景")])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("自治性")])]),v._v(" "),t("p",[v._v("在标准化和团队自治之间寻找一个正确的平衡点")])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("治理")])]),v._v(" "),t("p",[v._v("确保系统按照技术愿景的要求实现")])])]),v._v(" "),t("p",[v._v("成功要靠不断的取舍来实现。总会有一些原因需要你改变工作的方式，但是具体做哪些改变就只能依赖于自己的经验了。")]),v._v(" "),t("h3",{attrs:{id:"微服务的组织架构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#微服务的组织架构"}},[v._v("#")]),v._v(" 微服务的组织架构")]),v._v(" "),t("blockquote",[t("p",[v._v("康威法则: 设计系统的组织以及所产生的架构，等价于企业的组织架构；")])]),v._v(" "),t("p",[t("s",[v._v("传统的组织架构：产品部门、用户体验部门、研发部门、测试部门、。。。运维部门等；")])]),v._v(" "),t("p",[v._v("微服务组织架构：跨职能微服务产品团队")]),v._v(" "),t("p",[v._v("微服务架构实际上是组织架构的一种重组：从以前的职能部门，转换成跨职能部门的组织架构；")]),v._v(" "),t("p",[v._v('团队人员不再只是"围绕项目建立，当项目结束以后就回到职能部门”；而是围绕着微服务来建立团队，不断的开发迭代，从而提供一个API、平台产品。')]),v._v(" "),t("p",[t("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2019-12-09-040706.png",alt:"246c7f96401297282f4a5e7574d81c71_403x359"}})]),v._v(" "),t("p",[v._v("微服务核心概念："),t("strong",[v._v("端到端 （End to End")]),v._v(" "),t("strong",[v._v("Ownership")]),v._v("）团队内部之间能够形成一个闭环。")]),v._v(" "),t("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2019-09-16-124506.jpg",width:"300"}}),v._v(" "),t("p",[v._v("每个团队自行负责产品的设计，架构，开发，构建，部署，运维，支持。团队各自发布自己的模块，团队间模块解耦，升级时向下版本兼容，互不影响。一个团队规模大致12人左右。")]),v._v(" "),t("h3",{attrs:{id:"中台战略"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#中台战略"}},[v._v("#")]),v._v(" 中台战略")]),v._v(" "),t("p",[v._v("中台概念的由来：2013年，马云带领阿里的高管，参观了supercell。一家位于芬兰的移动游戏公司。发现他们公司的虽然团队特别小，但是居然能够在几周时间内就做出一款游戏。其中除了敏捷开发、快速试错以外，其成功还有一个最关键的要素就是supercell的中台能力。supercell的中台架构模式给阿里高管很大的震撼，这也催生了阿里巴巴的中台战略。")]),v._v(" "),t("p",[v._v('阿里中台战略："大中台、轻前台"。通过厚实的中台架构，来向前台输送弹药。让前台业务更加灵活，并且能快速适应市场的需求。')]),v._v(" "),t("p",[t("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2019-12-09-040708.png",alt:"中台架构"}})]),v._v(" "),t("p",[v._v("中台：")]),v._v(" "),t("p",[v._v("最后推荐一篇文章：互联网公司中所谓中台是怎么定义的？ -  知乎\nhttps://www.zhihu.com/question/57717433/answer/719218827")]),v._v(" "),t("h3",{attrs:{id:"一个清晰简洁的微服务分层"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一个清晰简洁的微服务分层"}},[v._v("#")]),v._v(" 一个清晰简洁的微服务分层")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2019-12-09-040721.png",alt:"5a7a5ed7818d8bb427548f493b3d3924_1193x541"}})]),v._v(" "),t("p",[v._v("从业务逻辑上：我们把服务分为"),t("code",[v._v("聚合服务")]),v._v("和"),t("code",[v._v("基础服务")]),v._v("两层；")]),v._v(" "),t("p",[t("code",[v._v("基础服务")]),v._v("主要提供比较基础的、通用的接口服务。这些服务一般都是核心业务，比如订单服务、账户服务。")]),v._v(" "),t("p",[t("code",[v._v("聚合服务")]),v._v("，一般也叫适配服务，BFF。它根据业务需要，将多个基础服务组合在一起，或者对服务的返回数据进行相应裁剪。以减少基础服务的重复开发，也避免了客户端过多的请求调用，减少开销。")]),v._v(" "),t("h2",{attrs:{id:"微服务的技术架构模型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#微服务的技术架构模型"}},[v._v("#")]),v._v(" 微服务的技术架构模型")]),v._v(" "),t("p",[t("strong",[v._v("6层架构模型")])]),v._v(" "),t("p",[t("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2019-12-09-040710.png",alt:"e7e9618ee6bd013513ffc85a67b5da26_1468x881"}})]),v._v(" "),t("h3",{attrs:{id:"引入微服务架构需要解决的问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#引入微服务架构需要解决的问题"}},[v._v("#")]),v._v(" 引入微服务架构需要解决的问题")]),v._v(" "),t("p",[v._v("微服务之间如何通信？")]),v._v(" "),t("p",[v._v("微服务之间如何互相发现")]),v._v(" "),t("p",[v._v("微服务的部署、更新、扩容")]),v._v(" "),t("h3",{attrs:{id:"通信协议rpc-vs-rest"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#通信协议rpc-vs-rest"}},[v._v("#")]),v._v(" 通信协议RPC VS REST")]),v._v(" "),t("table",[t("thead",[t("tr",[t("th"),v._v(" "),t("th",[v._v("RPC")]),v._v(" "),t("th",[v._v("REST")])])]),v._v(" "),t("tbody",[t("tr",[t("td",[v._v("耦合性")]),v._v(" "),t("td",[v._v("强耦合")]),v._v(" "),t("td",[v._v("松散耦合")])]),v._v(" "),t("tr",[t("td",[v._v("消息协议")]),v._v(" "),t("td",[v._v("二进制协议")]),v._v(" "),t("td",[v._v("JSON 、XML文本协议")])]),v._v(" "),t("tr",[t("td",[v._v("通讯协议")]),v._v(" "),t("td",[v._v("TCP")]),v._v(" "),t("td",[v._v("HTTP/HTTP2")])]),v._v(" "),t("tr",[t("td",[v._v("性能")]),v._v(" "),t("td",[v._v("高")]),v._v(" "),t("td",[v._v("低于RPC")])]),v._v(" "),t("tr",[t("td",[v._v("接口契约")]),v._v(" "),t("td",[v._v("thrift、profobuf")]),v._v(" "),t("td",[v._v("Swagger 接口定义")])]),v._v(" "),t("tr",[t("td",[v._v("客户端")]),v._v(" "),t("td",[v._v("强类型客户端，可以支持多语言客户端")]),v._v(" "),t("td",[v._v("一般http client可访问，支持多客户端语言。")])]),v._v(" "),t("tr",[t("td",[v._v("案例 - 框架")]),v._v(" "),t("td",[v._v("Dubbo(阿里), motan,  grpc(google), thrift")]),v._v(" "),t("td",[v._v("SpringMVC, SpringBoot, jax-rs, dropwizard")])]),v._v(" "),t("tr",[t("td",[v._v("开发者友好")]),v._v(" "),t("td",[v._v("客户端比较方便，但是二进制消息不可读。调试比较麻烦；")]),v._v(" "),t("td",[v._v("文本可读，通过浏览器可访问")])]),v._v(" "),t("tr",[t("td",[v._v("对外开放")]),v._v(" "),t("td",[v._v("对外暴露时，一般需要转换成REST协议的形式")]),v._v(" "),t("td",[v._v("直接对外开放")])])])]),v._v(" "),t("h3",{attrs:{id:"服务发现机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#服务发现机制"}},[v._v("#")]),v._v(" 服务发现机制")]),v._v(" "),t("blockquote",[t("p",[v._v("消费者发现生产者服务")])]),v._v(" "),t("ol",[t("li",[t("strong",[v._v("传统模式：基于LB")])])]),v._v(" "),t("p",[t("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2019-12-09-040709.png",alt:"image-20190915101129140"}})]),v._v(" "),t("p",[v._v("服务上线时，向运维申请域名，运维人员根据域名配置负载均衡，然后提供域名给客户端去调用；")]),v._v(" "),t("p",[v._v("客户端通过域名DNS解析到负载均衡服务器上，从而调用服务；")]),v._v(" "),t("p",[t("strong",[v._v("缺点：")])]),v._v(" "),t("ul",[t("li",[t("p",[v._v("需要运维人工介入，每加一个服务，都需要去配置一下；")])]),v._v(" "),t("li",[t("p",[v._v("负载均衡器很可能是单节点的，如果 LB挂了，所有的服务都可能无法访问；")])]),v._v(" "),t("li",[t("p",[v._v("性能会有损失, 因为客户端所有需要访问的服务都必须穿透LB。")])])]),v._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[t("strong",[v._v("进程内LB模式")])])]),v._v(" "),t("p",[t("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2019-12-09-040736.png",alt:"775cf00315d405b94adae2d1ed717319_599x318"}})]),v._v(" "),t("p",[t("code",[v._v("服务提供方(Service Provider)")]),v._v("通过服务注册方式(服务注册表)向外发布服务，并且定期发送心跳，告诉服务注册表我还活着")]),v._v(" "),t("p",[t("code",[v._v("服务消费者Consumer")]),v._v("自带LB, 用来支持服务发现和负载均衡功能。LB发现并调用后台服务，同时定期去同步服务注册表中的服务；")]),v._v(" "),t("p",[v._v("好处：")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("解决了单点的问题，没有集中LB。")])]),v._v(" "),t("li",[t("p",[v._v("同时解决了LB消耗性能的问题，因为都是进程内服务；")])])]),v._v(" "),t("p",[v._v("缺点：")]),v._v(" "),t("p",[v._v("1.每个进程内有一个独立LB，那么LB需要开发不同的语言版本，支持多种开发语言；")]),v._v(" "),t("p",[v._v("2.升级维护很麻烦；")]),v._v(" "),t("ol",{attrs:{start:"3"}},[t("li",[t("strong",[v._v("主机独立LB")])])]),v._v(" "),t("p",[t("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2019-12-09-040722.png",alt:"f8a5f8babc09866d8f4117f214c00336_597x262"}})]),v._v(" "),t("p",[v._v("把LB以独立进程部署, 和消费者放在一个主机上；LB可以支持多语言。")]),v._v(" "),t("p",[v._v("可以用容器的方式来部署服务+LB；")]),v._v(" "),t("blockquote",[t("p",[v._v("问题：以容器的方式来部署，是将LB部署在容器上，容器内服务共享？还是部署在容器主机上，所有容器共享？")])]),v._v(" "),t("p",[v._v("容器部署的话，建议每个容器部署一个独立进程LB（如Service Mesh），这样隔离性更好，容器内的LB挂了，只影响那个容器，主机上其它容器不受影响。")]),v._v(" "),t("p",[v._v("如果容器共享主机上的独立进程LB的话，则如果主机上的LB挂了，则整个主机上的容器全部受影响。")]),v._v(" "),t("h3",{attrs:{id:"service-mesh"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#service-mesh"}},[v._v("#")]),v._v(" Service Mesh")]),v._v(" "),t("blockquote",[t("p",[v._v("Service Mesh/服务网格，是一个基础层设施，功能在于处理服务间的通信，职责是负责实现请求的可靠传递；")])]),v._v(" "),t("h4",{attrs:{id:"sidecar"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sidecar"}},[v._v("#")]),v._v(" SideCar")]),v._v(" "),t("p",[v._v("首先需要了解一下"),t("code",[v._v("SideCar/边车")]),v._v("的设计模式。他主要的作用是用来发现服务，转发客户端的请求，调用服务。")]),v._v(" "),t("p",[v._v("他的设计灵感有点类似于摩托车的边车，它不一定应用程序中的一部分，但是可以连接服务的一部分，也可以放在服务程序的任意一个位置。")]),v._v(" "),t("p",[v._v("看一下Service Mesh中SideCar的架构：")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2019-12-09-040734.jpg",alt:"5a5491d2835ec"}})]),v._v(" "),t("p",[v._v("客户端通过简单RCP，来连接到Sidecar服务，Sidecar再通过服务注册中心发现服务，最后将客户端请求代理转发到最终的目标服务；")]),v._v(" "),t("p",[v._v("这里的Sidecar并不是传统意义上的Sidecar，而是Service Mesh单应用场景下的表现形式；")]),v._v(" "),t("p",[v._v("Sidecar和Service Mesh的区别主要有三点：")]),v._v(" "),t("table",[t("thead",[t("tr",[t("th"),v._v(" "),t("th",[v._v("Sidecar")]),v._v(" "),t("th",[v._v("Service Mesh")])])]),v._v(" "),t("tbody",[t("tr",[t("td",[v._v("整体性")]),v._v(" "),t("td",[v._v("单组件")]),v._v(" "),t("td",[v._v("强调整体的网络")])]),v._v(" "),t("tr",[t("td",[v._v("适用性")]),v._v(" "),t("td",[v._v("只能适用于特定的框架")]),v._v(" "),t("td",[v._v("可以通用适配")])]),v._v(" "),t("tr",[t("td",[v._v("可选择性")]),v._v(" "),t("td",[v._v("可选的，允许直连")]),v._v(" "),t("td",[v._v("必须经过ServiceMesh")])])])]),v._v(" "),t("p",[v._v("多个微服务调用的结构：")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2019-10-01-074011.jpg",alt:"5a54921232d1a"}})]),v._v(" "),t("p",[v._v("Service Mesh在所有的服务下面，负责处理所有的服务连接，这一层也称为："),t("code",[v._v("服务间通讯专用基础设施层")])]),v._v(" "),t("p",[v._v("如果有大量的服务连接，呈现出来的就是一个网格状(Service Mesh)。绿色部分代表应用，蓝色部分代表SideCar。")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2019-12-09-040737.jpg",alt:"5a5492269b895"}})]),v._v(" "),t("p",[v._v("大量服务连接的网格里，ServiceMesh不再被视为单个进程，而是强调整个代理连接形成的网络；这也是它和Sidecar的不同点。")]),v._v(" "),t("h4",{attrs:{id:"service-mesh的演变"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#service-mesh的演变"}},[v._v("#")]),v._v(" Service Mesh的演变")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2019-12-09-040730.jpg",alt:"9ef38cc2efaa4d7cb16a4cce3110864f"}})]),v._v(" "),t("p",[t("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2019-12-09-040738.jpg",alt:"d8f1b8d7e1f54b91a6d56ee622c0e9d3"}})]),v._v(" "),t("p",[v._v("似乎框架层帮我们解决了微服务的很多问题：负载均衡，限流熔断，安全限制等等。但是每个微服务都需要这些基础的功能，而微服务开发的语言可能又大不相同，并且类似于SpringCloud、Dubbo这些微服务框架也会造成很多痛点。")]),v._v(" "),t("p",[t("strong",[v._v("痛点1")]),v._v("：门槛高。框架的学习门槛比较高，简单入门比较容易，但是熟练应用和深入了解需要大量的时间。而业务团队的优势往往不是技术，而是业务的理解和对系统的了解。")]),v._v(" "),t("p",[t("strong",[v._v("痛点2")]),v._v("：功能不全"),t("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2019-12-09-040717.png",alt:"b456e3c0500f4e6ead2730a9eb639b9d"}})]),v._v(" "),t("p",[v._v("传统的Spring Cloud、Dubbo框架提供的功能有限，不具备一整套生态系统；基于Spring Cloud的基础版本做完整补充、扩展、加强需要巨大的精力；")]),v._v(" "),t("p",[t("strong",[v._v("痛点3")]),v._v(": 跨语言")]),v._v(" "),t("p",[v._v("微服务可以采用最适合的语言来编写。理论上说，不同的团队，不同的微服务，可以根据实际情况选择团队最擅长，或者最适合当前应用的编程语言。但是这样就要提供不同语言的框架，实际需要面临巨大的开发工作量，代价极高；")]),v._v(" "),t("p",[t("strong",[v._v("痛点4")]),v._v("：升级困难")]),v._v(" "),t("p",[v._v("当服务端数以百计起，客户端数以千计起时。服务端升级，客户端可能不会选择升级，那么就必须去兼容每个版本，再加上不同的语言版本，试想下需要消耗多大的精力，投入多少工作量！")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2019-12-09-040725.jpg",alt:"b4209fab90db42cbb8893e38782442b2"}})]),v._v(" "),t("p",[v._v("借鉴当年TCP/IP的思路，对于服务间通讯，在传统的侵入式框架外，出现了另外一种思路：")]),v._v(" "),t("p",[v._v("既然我们可以把网络通讯的技术栈剥离并下沉为TCP，我们是否也可以用类似的方式来处理微服务中服务间通讯的技术栈。于是出现了上面的演变方案，通过配置文件来实现反向代理，将请求路由到服务；")]),v._v(" "),t("p",[v._v("虽然这个方案很简陋，但是依然有值得借鉴的地方：客户端和服务器端应该隔离，部分功能下沉到中间层来实现请求转发。")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2019-12-09-40724.jpg",alt:"ed2a3bf738dc4b868cb9bf3d9e65d885"}})]),v._v(" "),t("p",[v._v("Sidecar借鉴了Proxy的模式，但是他的设计局限性很强，表现为"),t("strong",[v._v("为特定的基础设施而设计")]),v._v("。只适用于特定的框架或者需求场景，很难对外推广。")]),v._v(" "),t("p",[t("strong",[v._v("第一代Service Mesh")])]),v._v(" "),t("p",[t("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2019-12-09-040723.jpg",alt:"52055434dac2409dba020b102f22136c"}})]),v._v(" "),t("p",[t("strong",[v._v("第二代Service Mesh")])]),v._v(" "),t("p",[t("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2019-12-09-040732.jpg",alt:"d71ab7aaf1eb446b848d215a9dce8130"}})]),v._v(" "),t("p",[t("strong",[v._v("总结")])]),v._v(" "),t("p",[v._v("Service Mes应需而生，解决了传统微服务框架带来的4个痛点：")]),v._v(" "),t("p",[v._v("内容高，门槛多；——> 交给Service Mesh，应用只需要关注与业务逻辑；")]),v._v(" "),t("p",[v._v("服务治理功能不齐全； ——> Service Mesh功能齐全")]),v._v(" "),t("p",[v._v("升级困难； ——> 可单独升级")]),v._v(" "),t("p",[v._v("跨语言； ——> 客户端简化，通过rest或其他简单远程调用方式；服务端只需要做服务注册的事情；")]),v._v(" "),t("h3",{attrs:{id:"api网关"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#api网关"}},[v._v("#")]),v._v(" API网关")]),v._v(" "),t("blockquote",[t("p",[v._v("为什么要使用API网关？")]),v._v(" "),t("p",[v._v("API网关是一个系统与外界连接的入口。可以理解为一个企业的大门，用来做安全防护，限制访问，请求路由等工作；")])]),v._v(" "),t("p",[t("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2019-12-09-040724.png",alt:"3912920-df6b13ad41a9ce3d"}})]),v._v(" "),t("p",[v._v("网关的作用：")]),v._v(" "),t("p",[v._v("网关服务最主要的作用，是为内部服务提供统一的对外出口，向外部访问者提供统一的服务入口。可以屏蔽内部的服务细节。")]),v._v(" "),t("p",[v._v("网关可以对外界访问做一个安全防护，比如限制外部访问、统一鉴权、熔断等。")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2019-12-09-040725.png",alt:"13e53557b2a76cb69144c23a8fa7db36_851x449"}})]),v._v(" "),t("p",[v._v("最上层是用户接入设备")]),v._v(" "),t("p",[v._v("通过负载均衡器（一般网关服务都是无状态服务，无论通过哪一个网关服务，都可以提供同样的服务。所以做了一层负载均衡，避免单点故障）")]),v._v(" "),t("p",[v._v("转发到网关服务，从而最终请求各个微服务。")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("反向路由")]),v._v("：将内部的服务转化成为对外服务")]),v._v(" "),t("li",[v._v("安全认证：用于检测请求，识别身份")]),v._v(" "),t("li",[v._v("限流熔断：防止大流量的访问")]),v._v(" "),t("li",[v._v("日志监控：记录日志")])]),v._v(" "),t("h4",{attrs:{id:"无状态服务vs有状态服务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#无状态服务vs有状态服务"}},[v._v("#")]),v._v(" 无状态服务VS有状态服务")]),v._v(" "),t("p",[v._v("无状态服务：对于单次的请求，不依赖于其他请求数据就能完成。也就是，客户端每次发过来的请求，服务端只需要根据这次请求传入的信息，可能再加上一些外部的依赖服务（如数据库），就可以完成对请求处理，服务本身不存储任何信息。")]),v._v(" "),t("p",[v._v("有状态服务：在服务端保存了一些数据信息，请求的先后顺序有一定的关联性。比如发送验证码和校验验证码；")]),v._v(" "),t("h3",{attrs:{id:"zuul网关架构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#zuul网关架构"}},[v._v("#")]),v._v(" Zuul网关架构")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2019-12-09-040728.png",alt:"18adb3e66cedfa991acbead83c8ae970_1150x832"}})]),v._v(" "),t("p",[v._v("框架的核心特点：")]),v._v(" "),t("p",[v._v("​\t1. 3层Filter；")]),v._v(" "),t("p",[v._v("​\t2. 可插拔Filter配置；")]),v._v(" "),t("p",[v._v("​\tZuul的Filter可以很灵活的配置。开发者开发完Filter过滤器后。")]),v._v(" "),t("p",[v._v("​\ta. 首先通过publisher存储在"),t("code",[v._v("Filter Database")]),v._v("中，")]),v._v(" "),t("p",[v._v("​\tb. 通过poller轮训上传到"),t("code",[v._v("Filter Directories")]),v._v("里。")]),v._v(" "),t("p",[v._v("​\tc. 上层的"),t("code",[v._v("Filter File Manager")]),v._v("会定期扫描"),t("code",[v._v("Filter Directories")]),v._v("，")]),v._v(" "),t("p",[v._v("​\t4. 最后通知loader将Filter加载到Runner里，应用起来；")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2019-12-09-040735.png",alt:"0fc714c1ce4966d8f095075b9162d860_1498x905"}})]),v._v(" "),t("p",[v._v("核心模块：")]),v._v(" "),t("p",[v._v("​\tPre Filters前置路由：请求进来，先经过"),t("code",[v._v("Pre Filters")]),v._v(", 例如可以做日志记录；")]),v._v(" "),t("p",[v._v("​\tRouting Filters路由：主要作用就是路由并找到具体的微服务，请求服务；")]),v._v(" "),t("p",[v._v("​\tPost Filters后置路由：主要是处理需要返回给客户的消息;")]),v._v(" "),t("p",[v._v("​\tError Filters: 所有路由拦截的过程中出现的错误，都可以抛给Error Filter来统一处理，最后交给Post Filters来返回；")]),v._v(" "),t("h3",{attrs:{id:"netflix的微服务路由发现机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#netflix的微服务路由发现机制"}},[v._v("#")]),v._v(" Netflix的微服务路由发现机制")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2019-12-09-040731.png",alt:"050291d25a274c5611651e1a27f21c02_1726x906"}})]),v._v(" "),t("p",[v._v("Netflix服务注册中心组件： Eureka")]),v._v(" "),t("p",[v._v("Netflix网关组件：Zuul")]),v._v(" "),t("p",[v._v("两个组件支撑了整个netflix的路由发现体系：")]),v._v(" "),t("p",[v._v("第一层服务发现机制：")]),v._v(" "),t("p",[v._v("基础服务启动时，会向Eureka注册服务，内部的聚合服务需要用到基础服务时，通过"),t("code",[v._v("服务注册中心")]),v._v("来发现服务。")]),v._v(" "),t("p",[v._v("第二层服务发现机制：")]),v._v(" "),t("p",[v._v("聚合服务也会向注册中心注册服务，网关层作为客户的统一接入点，会通过注册中心的路由表，来找到对应的聚合服务。")]),v._v(" "),t("blockquote",[t("p",[v._v("问题：现在市面上有很多组件，比如Zookeeper,Consul,还有nginx等等。那么用这些组件, 该如何做微服务发现机制呢?")])]),v._v(" "),t("h3",{attrs:{id:"配置中心"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#配置中心"}},[v._v("#")]),v._v(" 配置中心")]),v._v(" "),t("blockquote",[t("p",[v._v("问题：问什么需要配置中心？")])]),v._v(" "),t("p",[v._v("大部分时候，我们的配置都是写在配置文件中的。会有一些缺点或者会造成一些问题：")]),v._v(" "),t("ol",[t("li",[v._v("配置不标准, 格式不统一")]),v._v(" "),t("li",[v._v("生效周期长")]),v._v(" "),t("li",[v._v("配置被修改了并不知道，往往部署到线上了才发现；")]),v._v(" "),t("li",[v._v("而且没有审计功能,  很难追溯谁调整的，只能查看代码记录；")])]),v._v(" "),t("blockquote",[t("p",[v._v("一般有哪些可以配置的项？")])]),v._v(" "),t("ul",[t("li",[v._v("数据库连接字符串")]),v._v(" "),t("li",[v._v("超时参数")]),v._v(" "),t("li",[v._v("业务开关")]),v._v(" "),t("li",[v._v("功能开关等")])]),v._v(" "),t("h4",{attrs:{id:"基本原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基本原理"}},[v._v("#")]),v._v(" 基本原理")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2019-12-09-040734.png",alt:"img"}})]),v._v(" "),t("p",[v._v("开发人员可以对配置中心更改配置, 然后服务可以实时更改自己配置。\n2种读取配置的方式：(各有优劣)")]),v._v(" "),t("ol",[t("li",[v._v("自己不断的去拉,然后更新自己(这个可以保证拉到,这次没拉到,下次再拉)")]),v._v(" "),t("li",[v._v("配置中心自己主动推送(这个可以实时,但是没推成功,就不是实时)")])]),v._v(" "),t("h4",{attrs:{id:"apollo配置中心架构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#apollo配置中心架构"}},[v._v("#")]),v._v(" Apollo配置中心架构")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2019-12-09-040716.png",alt:"164492343a4d7c4fc78c336a9c901c72_1597x782"}})]),v._v(" "),t("h3",{attrs:{id:"微服务治理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#微服务治理"}},[v._v("#")]),v._v(" 微服务治理")]),v._v(" "),t("blockquote",[t("p",[v._v("服务治理一般包含哪些内容？")])]),v._v(" "),t("p",[t("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2019-12-09-040726.png",alt:"ebe8f11b112897e58ff36732b222ce40_1709x867"}})]),v._v(" "),t("ul",[t("li",[t("p",[t("strong",[v._v("服务发现")]),v._v("：好的微服务框架需要能够有服务发现机制；")])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("负载均衡")]),v._v("：大规模的服务发布需要负载均衡，保证服务不会单点故障；也可以应用到服务升级上，蓝绿升级。")])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("监控")])]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("日志监控")]),v._v("：日志监控、日志查看用来排查线上问题；")]),v._v(" "),t("li",[t("strong",[v._v("Metrics")]),v._v("：多角度去监控服务")]),v._v(" "),t("li",[t("strong",[v._v("调用链监控")]),v._v("：在错综复杂的微服务系统中，调用逻辑往往很复杂，需要通过调用链监控系统查看具体哪个环节出现问题；")])])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("熔断限流")]),v._v("：高并发情况下，任意一个服务崩溃都会导致整个系统的崩溃；所以需要加入限流熔断，避免高频率的访问；")])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("安全")]),v._v("&"),t("strong",[v._v("访问控制")]),v._v("：网关的基础功能，限制功能访问；")])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("REST")]),v._v("/"),t("strong",[v._v("RPC")]),v._v(": 支持两种协议的访问；")])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("统一异常处理")]),v._v("：统一规范错误模式，方便查看日志。")])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("文档")]),v._v("：对外对内的API文档输出，最好能自动生成；")])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("配置集成")]),v._v("：通过配置中心，来实现动态修改配置，实时发布服务；")])])]),v._v(" "),t("h3",{attrs:{id:"服务监控体系"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#服务监控体系"}},[v._v("#")]),v._v(" 服务监控体系")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2019-12-09-040737.png",alt:"4a9f578da1eace0ca6c0666acae5e17f_1757x909"}})]),v._v(" "),t("blockquote",[t("p",[v._v("5个层次，从下往上依次为")])]),v._v(" "),t("p",[t("strong",[v._v("基础设施监控")]),v._v(": 一般都是服务运营商去进行监控；")]),v._v(" "),t("p",[t("strong",[v._v("系统层监控")]),v._v("：主要监控对象为物理机、虚拟机、操作系统，监控指标一般是cpu、内存、网络、硬盘等；")]),v._v(" "),t("p",[t("strong",[v._v("应用层监控")]),v._v("：应用层一般针对服务进行监控，主要关心"),t("code",[v._v("服务接口")]),v._v("是否可用、平均响应时间、（qbs）每秒钟处理请求数量、是否存在慢查询等等。")]),v._v(" "),t("p",[t("strong",[v._v("业务监控")]),v._v("：主要监控核心业务，比如看下下单情况、注册登录情况。产品部门会针对业务层的监控数据进行分析，来判断产品是否满足市场需求、推广的效果是否符合预期等；")]),v._v(" "),t("p",[t("strong",[v._v("端用户体验监控")]),v._v("：这个一般就是针对客户端进行监控。比如对客户端版本进行监控，接入的运营商是移动还是电信等等。用户体验监控主要是产品经理比较关心的地方；")]),v._v(" "),t("h4",{attrs:{id:"监控内容"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#监控内容"}},[v._v("#")]),v._v(" 监控内容")]),v._v(" "),t("ul",[t("li",[v._v("健康检查")]),v._v(" "),t("li",[v._v("告警系统")]),v._v(" "),t("li",[v._v("调用链监控")]),v._v(" "),t("li",[v._v("日志监控")]),v._v(" "),t("li",[v._v("Metrics监控")])]),v._v(" "),t("h4",{attrs:{id:"监控方案"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#监控方案"}},[v._v("#")]),v._v(" 监控方案")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2019-12-09-040733.png",alt:"1bfb36ddd14d2375188465288b87b226_1704x866"}})]),v._v(" "),t("p",[t("strong",[v._v("方案理解：")])]),v._v(" "),t("p",[v._v("微服务一般会在进程内部或者主机上加一个"),t("code",[v._v("agent（代理）")]),v._v("，这个代理会去收集并分发日志")]),v._v(" "),t("p",[v._v("如果日志量过大，可以通过消息队列（Kafka）做一个缓冲，")]),v._v(" "),t("p",[v._v("所有的日志会通过"),t("code",[v._v("ELK")]),v._v("方案，进行全文搜索分析；")]),v._v(" "),t("p",[v._v("同时会通过"),t("code",[v._v("Metrics")]),v._v("来监控"),t("code",[v._v("度量")]),v._v("，将不同维度的度量数据存储在"),t("code",[v._v("InfluxDB")]),v._v(" 的时间序列数据库中，Grafana针对数据进行可视化展示。")]),v._v(" "),t("p",[v._v("最后通过一个"),t("code",[v._v("健康检查机制")]),v._v("sensu/Nagios/Kubernetes，来去检查微服务的监控情况")]),v._v(" "),t("p",[t("strong",[v._v("方案技术框架")])]),v._v(" "),t("blockquote",[t("p",[t("code",[v._v("ELK")]),v._v("是Elasticsearch + logstash + kibana三个结合在起一起缩写；")]),v._v(" "),t("p",[v._v("Elasticsearch是实时全文搜索和引擎分析")]),v._v(" "),t("p",[v._v("logstash是用来搜集、分析、过滤日志的工具")]),v._v(" "),t("p",[v._v("kibana是基于web的图形界面，用于搜索、分析和可视化数据")])]),v._v(" "),t("h3",{attrs:{id:"调用链监控"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#调用链监控"}},[v._v("#")]),v._v(" 调用链监控")]),v._v(" "),t("blockquote",[t("p",[v._v("调用链监控来源于google的一篇论文：Google Dapper")])]),v._v(" "),t("p",[t("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2019-12-09-040718.png",alt:"323d71a2e7c3f4d8df325d12d51f037c_1505x853"}})]),v._v(" "),t("p",[v._v("如图所示：http请求 经过 web 容器，再在内部经过一些列服务转换，进入service1 ，再到 DB 再返回；")]),v._v(" "),t("p",[v._v("每个请求经过一层调用，都会生成一个"),t("code",[v._v("span")]),v._v(";")]),v._v(" "),t("p",[v._v("每个span，会生成自己的trace_id，span_id, 并且关联上层的parent_id. 这样，通过这3个id的关系，来生成调用链；")]),v._v(" "),t("h4",{attrs:{id:"监控框架工具："}},[t("a",{staticClass:"header-anchor",attrs:{href:"#监控框架工具："}},[v._v("#")]),v._v(" 监控框架工具：")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2019-12-09-040720.png",alt:"f53e7bdf7fa23d869f741aa8aca76df5_1825x852"}})]),v._v(" "),t("h3",{attrs:{id:"熔断限流"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#熔断限流"}},[v._v("#")]),v._v(" 熔断限流")]),v._v(" "),t("h4",{attrs:{id:"hystrix框架"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hystrix框架"}},[v._v("#")]),v._v(" Hystrix框架")]),v._v(" "),t("p",[v._v("封装请求：熔断、隔离、限流、降级")]),v._v(" "),t("p",[v._v("如果打开了限流措施，直接短路。")]),v._v(" "),t("p",[v._v("如果线程满了")]),v._v(" "),t("p",[v._v("如果运行超时：降级；")]),v._v(" "),t("h3",{attrs:{id:"容器技术"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#容器技术"}},[v._v("#")]),v._v(" 容器技术")]),v._v(" "),t("h3",{attrs:{id:"蓝绿部署和灰度发布"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#蓝绿部署和灰度发布"}},[v._v("#")]),v._v(" 蓝绿部署和灰度发布")]),v._v(" "),t("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2019-09-18-125511.png",width:"500"}}),v._v(" "),t("p",[v._v("蓝绿部署：蓝色代表是老版本，绿色代表是新版本；")]),v._v(" "),t("p",[v._v("灰度发布：不是一次性把流量全部切换到新版本上，而是先切一部分流量，确保没问题后，再全部切换到新版本上。")]),v._v(" "),t("p",[v._v("微服务")]),v._v(" "),t("p",[v._v("Mesos的服务框架")]),v._v(" "),t("p",[v._v("Master - Slaver 模式；")])])}),[],!1,null,null,null);_.default=a.exports}}]);