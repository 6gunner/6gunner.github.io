(window.webpackJsonp=window.webpackJsonp||[]).push([[72],{429:function(e,t,a){"use strict";a.r(t);var n=a(25),s=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("[TOC]")]),e._v(" "),a("h1",{attrs:{id:"eth学习"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#eth学习"}},[e._v("#")]),e._v(" ETH学习")]),e._v(" "),a("p",[e._v("文档")]),e._v(" "),a("p",[e._v("https://solidity.readthedocs.io/en/latest/solidity-by-example.html#voting")]),e._v(" "),a("p",[e._v("网上代码")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/cyrusadkisson/solidity-baby-steps",target:"_blank",rel:"noopener noreferrer"}},[e._v("solidity-baby-steps"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("参考资料")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://blog.csdn.net/qq_27500493/article/details/99822875",target:"_blank",rel:"noopener noreferrer"}},[e._v("dapp入门文档"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("https://kauri.io/collection/5bb65f0f4f34080001731dc2/ethereum-101")]),e._v(" "),a("p",[e._v("https://kauri.io/collection/5b8e401ee727370001c942e3")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://blog.csdn.net/qq_27500493/article/details/99822875",target:"_blank",rel:"noopener noreferrer"}},[e._v("一些别人整理的链接"),a("OutboundLink")],1)]),e._v(" "),a("h2",{attrs:{id:"合约开发"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#合约开发"}},[e._v("#")]),e._v(" 合约开发")]),e._v(" "),a("h3",{attrs:{id:"fallback-函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fallback-函数"}},[e._v("#")]),e._v(" Fallback 函数")]),e._v(" "),a("p",[e._v("合约可以有一个未命名的函数。这个函数不能有参数也不能有返回值。 如果在一个到合约的调用中，没有其他函数与给定的函数标识符匹配（或没有提供调用数据），那么这个函数（fallback 函数）会被执行。")]),e._v(" "),a("p",[e._v("除此之外，每当合约收到以太币（没有任何数据），这个函数就会执行。此外，为了接收以太币，fallback 函数必须标记为 "),a("code",[e._v("payable")]),e._v("。 如果不存在这样的函数，则合约不能通过常规交易接收以太币。")]),e._v(" "),a("p",[e._v("在这样的上下文中，通常只有很少的 gas 可以用来完成这个函数调用（准确地说，是 2300 gas），所以使 fallback 函数的调用尽量廉价很重要。 请注意，调用 fallback 函数的交易（而不是内部调用）所需的 gas 要高得多，因为每次交易都会额外收取 21000 gas 或更多的费用，用于签名检查等操作。")]),e._v(" "),a("p",[e._v("具体来说，以下操作会消耗比 fallback 函数更多的 gas：")]),e._v(" "),a("ul",[a("li",[e._v("写入存储")]),e._v(" "),a("li",[e._v("创建合约")]),e._v(" "),a("li",[e._v("调用消耗大量 gas 的外部函数")]),e._v(" "),a("li",[e._v("发送以太币")])]),e._v(" "),a("p",[e._v("请确保您在部署合约之前彻底测试您的 fallback 函数，以确保执行成本低于 2300 个 gas。")]),e._v(" "),a("h2",{attrs:{id:"dapp开发"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dapp开发"}},[e._v("#")]),e._v(" Dapp开发")]),e._v(" "),a("h3",{attrs:{id:"eth应用架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#eth应用架构"}},[e._v("#")]),e._v(" ETH应用架构")]),e._v(" "),a("p",[e._v("首先来看一下基于以太坊的应用架构。最上层的API、WEBAPP是给用户去看的。中间一块是区块链的应用层：包括智能合约、DApp。底层是区块链的核心技术：P2P网络，共识机制，账本。")]),e._v(" "),a("img",{staticStyle:{zoom:"33%"},attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2019-12-11-094127.jpg",alt:"img"}}),e._v(" "),a("h3",{attrs:{id:"钱包账户"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#钱包账户"}},[e._v("#")]),e._v(" 钱包账户")]),e._v(" "),a("blockquote",[a("p",[e._v("怎么理解钱包和账户？")])]),e._v(" "),a("p",[e._v("通俗的理解：账户就是银行卡，卡里面有钱。映射到区块链上，账户它实际上就是一串地址，这个地址上面有余额，还有公钥，私钥由你保管，类似于银行卡的密码。只有有用私钥才能发起交易。")]),e._v(" "),a("p",[e._v("而钱包就是用来存放这些地址的。一个钱包上可以有多个地址。一般钱包应用可以发起转账交易，可以创建地址，还可以去自动扫描账户地址上的余额。")]),e._v(" "),a("blockquote",[a("p",[e._v("Metamask 浏览器插件")])]),e._v(" "),a("p",[e._v("metamask是一个pc浏览器上的扩展应用，是一个eth的钱包。")]),e._v(" "),a("img",{staticStyle:{zoom:"20%"},attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2019-12-11-095427.png",alt:"image-20191211175427434"}}),e._v(" "),a("blockquote",[a("p",[e._v("ETH单位")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("1 wei = 1 * 10^-18  = 0.000000000000000001 ETHER\n\n1 gwei = 1* 10^-8 = 0.000000001 ETHER\n\n")])])]),a("h3",{attrs:{id:"智能合约"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#智能合约"}},[e._v("#")]),e._v(" 智能合约")]),e._v(" "),a("blockquote",[a("p",[e._v("什么是智能合约？")])]),e._v(" "),a("p",[e._v("任何在以太坊虚拟机 (EVM) 上运行的程序通常被称作“智能合约”。")]),e._v(" "),a("p",[e._v("智能合约本质上是一个被代码控制的账户，和普通的钱包账户一样，它也存在公钥、私钥。只不过智能合约账户的公私钥匙保存由合约部署者来保管的。")]),e._v(" "),a("blockquote",[a("p",[e._v("智能合约和eth账户的交互")])]),e._v(" "),a("p",[a("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2019-12-11-105220.png",alt:"image-20191211185219847"}})]),e._v(" "),a("p",[e._v("用户想要参与合约，首先必须有一个eth的账户地址。通过向合约地址发起交易，来进行合约的交互。")]),e._v(" "),a("blockquote",[a("p",[e._v("如何编写智能合约应用")])]),e._v(" "),a("p",[e._v("以太坊社区上最受欢迎的智能合约编程语言是 "),a("strong",[e._v("Solidity")]),e._v(" 和 "),a("strong",[e._v("Vyper")]),e._v("。")]),e._v(" "),a("blockquote",[a("p",[e._v("Dapp的交互流程")])]),e._v(" "),a("p",[e._v("开发者通过编码，将合约部署到以太坊网络；这个可以理解成服务端；")]),e._v(" "),a("p",[e._v("然后开发者对外提供Dapp的客户端，可以使普通的html页面，也可以是app应用。用户通过浏览器或者app应用，与这个合约应用进行交互。这就是Dapp的主要流程。")]),e._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2019-12-12-021548.png",alt:"image-20191212101548582"}}),e._v(" "),a("blockquote",[a("p",[e._v("一般Dapp的架构")])]),e._v(" "),a("p",[e._v("普通的Dapp完全可以把ETH网络当做服务端来使用，只需要开发提供前端页面。")]),e._v(" "),a("p",[e._v("更复杂一点Dapp还是需要有自己的后台服务，并且有数据库。最后通过后台服务来向ETH网络发起交互。")]),e._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2019-12-11-070818.png",alt:"image-20191211150818145"}}),e._v(" "),a("p",[e._v("// todo 补充一个复杂的dapp架构图；")]),e._v(" "),a("h3",{attrs:{id:"测试网"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#测试网"}},[e._v("#")]),e._v(" 测试网")]),e._v(" "),a("p",[e._v("以太坊社区维护了多个测试网。 开发者能够在应用程序部署到以太坊主网之前对其进行不同条件下的测试。")]),e._v(" "),a("p",[e._v("测试网络可以提供虚拟币，通过metamask插件也可以直接获取到。")]),e._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2019-12-14-050903.png",alt:"image-20191214130902801"}}),e._v(" "),a("h2",{attrs:{id:"简单dapp-demo"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简单dapp-demo"}},[e._v("#")]),e._v(" 简单Dapp Demo")]),e._v(" "),a("blockquote",[a("p",[e._v("代码地址：https://gitee.com/dendi.ke/eth-learn")])]),e._v(" "),a("h3",{attrs:{id:"环境准备"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#环境准备"}},[e._v("#")]),e._v(" 环境准备")]),e._v(" "),a("p",[e._v("介绍了那么多概念性的东西，现在来进入简单开发一个Dapp。")]),e._v(" "),a("blockquote",[a("p",[e._v("流程")])]),e._v(" "),a("div",{staticClass:"language-mermaid extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("graph TD\n1[准备测试网络]\n2[准备账户]\n3[获取测试币]\n4[开发合约]\n5[测试合约]\n6[编写合约测试用例]\n7[开发Dapp页面]\n8[编译发布合约]\n9[部署Dapp应用]\n1 --\x3e 2\n2 --\x3e 3\n3 --\x3e 4\n4 --\x3e 5\n5 --\x3e 6\n5 --\x3e 7\n6 --\x3e 8\n7 --\x3e 9\n\n")])])]),a("blockquote",[a("p",[e._v("测试网络")])]),e._v(" "),a("p",[e._v("有大概3种方法准备测试网络，第一种方法：自己跑一个节点；需要安装"),a("a",{attrs:{href:"#geth"}},[e._v("geth")]),e._v("客户端")]),e._v(" "),a("p",[e._v("第二种方法：可以使用 Ganache，在本地起一个节点来处理交易；或者使用Remix，它提供在浏览器内部的 JavaScript 测试网络。成本非常低，打开就可以用，本地测试非常的方便。")]),e._v(" "),a("p",[e._v("并且Ganache 和 Remix Javascript VM 都内置了已经解锁的帐户，不需要去关心帐户的私钥或助记词。")]),e._v(" "),a("p",[e._v("第三种方法：使用共享的测试网络，不过需要先准备好钱包和账户地址。")]),e._v(" "),a("img",{staticStyle:{zoom:"50%",align:"center"},attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2019-12-12-033822.png",alt:"image-20191212113821634"}}),e._v(" "),a("blockquote",[a("p",[e._v("获取账户、测试币")])]),e._v(" "),a("p",[e._v("以太坊上的任何操作都需要账户才能发起，所以需要准备好钱包和账户，还有币。")]),e._v(" "),a("h3",{attrs:{id:"代码架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码架构"}},[e._v("#")]),e._v(" 代码架构")]),e._v(" "),a("blockquote",[a("p",[e._v("后端服务")])]),e._v(" "),a("p",[e._v("因为是demo，后端采用在以太坊上面粗暴的用智能合约代替，设定所有数据都存在链上。")]),e._v(" "),a("p",[e._v("实际复杂应用中所有的数据不应该全部存储在以太坊区块链上，有一部分数据是存在传统的数据库里面。")]),e._v(" "),a("blockquote",[a("p",[e._v("合约开发工具 - Remix")]),e._v(" "),a("p",[e._v("https://remix.ethereum.org/#optimize=false&evmVersion=null&version=soljson-v0.5.12+commit.7709ece9.js")])]),e._v(" "),a("p",[e._v("Remix 适合做快速的验证概念和原型。在 Remix中可以快速写合约代码，然后调用它的合约接口，测试它的行为；此外还可以测试已有的合约实例，可以从以太坊的线上环境和测试环境把合约实例加载到 Remix 里面然后测试；当然也可以通过 Remix 把合约部署到任何以太坊网络上面。")]),e._v(" "),a("div",{staticClass:"language-sol extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('pragma solidity ^0.5.11;\n\ncontract Lottery {\n    address public owner;\n    // address payable: Same as address, but with the additional members transfer and send\n    // address payable is an address you can send Ether to,\n    // while a plain address cannot be sent Ether.\n    address payable[] private participates;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    function participate() public payable {\n        require(msg.value >= 0.1 ether, "不得少于0.1 eth");\n        participates.push(msg.sender);\n    }\n\n    function random() private view returns(uint) {\n       return uint(keccak256(abi.encodePacked(block.difficulty, block.timestamp, participates)));\n    }\n\n    function pickOne() public ownerOnly{\n\n        require(participates.length > 0, "参与人少于1个，不能选择");\n        uint index = random() % participates.length;\n        address payable winner = participates[index];\n        winner.transfer(address(this).balance);\n        participates = new address payable[](0);\n    }\n\n    modifier ownerOnly() {\n        require(msg.sender == owner, "必须是部署者");\n        _;\n    }\n\n    function getParticipates() public view returns(address payable[] memory) {\n        return participates;\n    }\n}\n')])])]),a("blockquote",[a("p",[e._v("前端服务")])]),e._v(" "),a("p",[e._v("前端服务实际上就是给用户去使用的界面。可以是html页面或者是app应用。这里采用比较熟悉的create-react-app cli来创建了一个应用，来开发简单的dapp页面。")]),e._v(" "),a("blockquote",[a("p",[e._v("测试用例")])]),e._v(" "),a("blockquote",[a("p",[e._v("编译合约")])]),e._v(" "),a("p",[e._v("通过node脚本来编译合约代码，最终生成2个文件，一个ABI文件，一个可以最终发布到以太坊网络上的字节码文件。")]),e._v(" "),a("blockquote",[a("p",[e._v("最终的目录结构")])]),e._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2019-12-14-025511.png",alt:"image-20191214105511246"}}),e._v(" "),a("h3",{attrs:{id:"框架整理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#框架整理"}},[e._v("#")]),e._v(" 框架整理")]),e._v(" "),a("blockquote",[a("p",[e._v("solc-js   编译合约代码")])]),e._v(" "),a("p",[e._v("输入输出配置")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('const input = {\n\tlanguage: \'Solidity\',\n\tsources: {},\n\tsettings: {\n\t\toutputSelection: {\n\t\t\t\'*\': {\n\t\t\t\t"*": [ "Metadata", "abi", "evm.bytecode" ]\n\t\t\t}\n\t\t}\n\t}\n};\n')])])]),a("p",[e._v("编译的结果")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("{\n  contracts: { 'Lottery.sol': { Lottery: [Object] } },\n  sources: { 'Lottery.sol': { id: 0 } }\n}\n")])])]),a("p",[e._v("编译出来其实最主要的是2个内容，都在Object里。其中一个是abi，一个是bytecode。")]),e._v(" "),a("p",[e._v("网上的solc教程都太老了，输出的格式其实已经完全变了，我也是参考了Remix的编译格式，才解析出来需要的文件。详细的后面会讲到。")]),e._v(" "),a("blockquote",[a("p",[e._v("web3.js  "),a("em",[e._v("以太坊 JavaScript API")])]),e._v(" "),a("p",[e._v("web3j     "),a("em",[e._v("以太坊 Java API")]),e._v(" https://juejin.im/entry/5b448c57f265da0f93138ccb")])]),e._v(" "),a("p",[e._v("这两个框架其实是一种类型的框架，只不过是不同语言实现。web3主要做的事情就是提供provider")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2019-12-12-064126.png",alt:"image-20191212144125841"}})]),e._v(" "),a("blockquote",[a("p",[e._v("ganache-cli")])]),e._v(" "),a("p",[e._v("提供本地网络的provider")]),e._v(" "),a("h3",{attrs:{id:"编译发布"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编译发布"}},[e._v("#")]),e._v(" 编译发布")]),e._v(" "),a("h4",{attrs:{id:"通过remix来编译发布"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#通过remix来编译发布"}},[e._v("#")]),e._v(" 通过Remix来编译发布")]),e._v(" "),a("p",[e._v("如下图所示，打开合约代码文件。点击compile，等待编译结果；")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2019-12-12-112412.png",alt:"image-20191212192411761"}})]),e._v(" "),a("p",[e._v("点击查看编译明细，可以看到如下的的几个内容：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("METADATA  编译器元数据,包含:编译器版本,编译器设置,源码信息等\nBYTECODE  合约编译完整的字节码结果\nABI  应用程序接口,用于标识合约提供了哪些函数给外部调用\nWEB3DEPLOY  Web3js版合约部署代码\nMETADATAHASH  元数据哈希\nGASESTIMATES  编译器计算函数调用需要消耗的Gas表\nRUNTIME BYTECODE  合约运行时字节码\nASSEMBLY  字节码反汇编\n")])])]),a("p",[e._v("这些内容中真正需要用到的就是2个。一个是ABI接口，一个是BYTECODE字节码结果；")]),e._v(" "),a("blockquote",[a("p",[e._v("ByteCode")])]),e._v(" "),a("p",[e._v("字节码一般结构如下。真正发布合约时用到的也就是object里面的内容；")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2019-12-12-112842.png",alt:"image-20191212192842375"}})]),e._v(" "),a("blockquote",[a("p",[e._v("ABI接口")])]),e._v(" "),a("p",[e._v("ABI是用来对外提供的接口。Dapp应用和合约进行交互就是通过这些接口的RCP调用。")]),e._v(" "),a("img",{staticStyle:{zoom:"70%"},attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2019-12-12-113050.png",alt:"image-20191212193049883"}}),e._v(" "),a("p",[e._v("这里我截了一下demo合约里面的几个接口；")]),e._v(" "),a("p",[e._v("红色表示需要付钱的方法，黄色的表示不需要付钱的，蓝色表示一些pure、view的方法，或者constant属性。")]),e._v(" "),a("p",[e._v("具体参考：https://solidity.readthedocs.io/en/develop/miscellaneous.html?highlight=pure#modifiers")]),e._v(" "),a("h4",{attrs:{id:"通过脚本编译"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#通过脚本编译"}},[e._v("#")]),e._v(" 通过脚本编译")]),e._v(" "),a("blockquote",[a("p",[e._v("solc编译sol文件")])]),e._v(" "),a("p",[e._v("如果需要自己写node脚本去编译发布的话，就比较麻烦，需要用到上面说到的"),a("code",[e._v("solc")]),e._v("框架。")]),e._v(" "),a("p",[e._v("首先要将合约代码编译出来，得到上面说的ABI接口和BYTECODE字节码。")]),e._v(" "),a("p",[e._v("具体的参考源码里面的"),a("code",[e._v("build/compile.js")]),e._v("，编译出来的二进制文件和abi文件都统一放到了compiled目录下面，以json的格式存储。")]),e._v(" "),a("blockquote",[a("p",[e._v("发布到测试网")])]),e._v(" "),a("p",[e._v("编译完成后，需要发布合约。发布合约的话，有几种方式：")]),e._v(" "),a("p",[e._v("第一种通过本地节点来发布")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// todo 待学习\n")])])]),a("p",[e._v("第二种通过Infura来发布")]),e._v(" "),a("p",[e._v("首先，去"),a("a",{attrs:{href:"https://infura.io/dashboard",target:"_blank",rel:"noopener noreferrer"}},[e._v("Infura"),a("OutboundLink")],1),e._v("网站注册一个账号，并且建立一个项目，拿到项目地址。")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2019-12-14-024243.png",alt:"image-20191214104242935"}})]),e._v(" "),a("p",[e._v("因为我的metamask的账户是RINKEBY的测试网络的，所以这里选择的endpoint也需要选择对应的。")]),e._v(" "),a("p",[e._v("然后，编写脚本，通过"),a("code",[e._v("@truffle/hdwallet-provider")]),e._v(" 来部署合约。")]),e._v(" "),a("p",[e._v("具体代码参考"),a("code",[e._v("build/deploy.js")]),e._v("。需要注意的是，这里部署合约是需要有一个eth的钱包账户。")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2019-12-14-024804.png",alt:"image-20191214104803357"}})]),e._v(" "),a("p",[e._v("最后拿到合约的地址，我保存在一个文件中，以便在dapp里使用。当然也可以选择不用文件保存，但是最终都需要在dapp里指明需要交互的合约地址。")]),e._v(" "),a("h3",{attrs:{id:"编写dapp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编写dapp"}},[e._v("#")]),e._v(" 编写Dapp")]),e._v(" "),a("p",[e._v("dapp其实就是就是一个普通的html应用，但是它通过web3的provider与合约进行了交互，")]),e._v(" "),a("p",[e._v("因为是学习Demo，所以我就直接参考了别人的应用设计，写了一个简单的彩票DAPP。参考的博客地址放在这：")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://juejin.im/post/5b230ff7f265da59780b7aed",target:"_blank",rel:"noopener noreferrer"}},[a("strong",[e._v("以太坊智能合约 + DApp 从入门到上线：来自前端工程师的实战指南 - 王仕军 | Jeth 第一期")]),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("图片我就直接拿来用了：")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2019-12-14-025916.png",alt:"image-20191214105915341"}})]),e._v(" "),a("p",[e._v("页面都很简单，就不用解释了，重点和难点是怎么去和合约进行交互。")]),e._v(" "),a("blockquote",[a("p",[e._v("授权账户")])]),e._v(" "),a("p",[e._v("前面说了，和合约的交互是需要有ETH的账户的。而这个DAPP是通过浏览器来打开的，所以首先需要向Metamask请求授权，允许该页面对Metamask的账户进行获取。")]),e._v(" "),a("p",[e._v("早版本的Metamask是不需要授权的，所以网上很多博客里都是直接使用"),a("code",[e._v("web3.currentProvider")]),e._v("来去获取账户。但是如果是新版的Metamask插件，不加这段代码，调用"),a("code",[e._v("web3.eth.getAccounts()")]),e._v("返回的都是一个空数组，也就无法进行交互。")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2019-12-14-030157.png",alt:"image-20191214110156505"}})]),e._v(" "),a("p",[e._v("授权的页面如下：")]),e._v(" "),a("img",{staticStyle:{zoom:"30%"},attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2019-12-14-030925.png",alt:"image-20191214110925275"}}),e._v(" "),a("blockquote",[a("p",[e._v("调用接口")])]),e._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2019-12-14-031024.png",alt:"image-20191214111023888"}}),e._v(" "),a("p",[e._v("其次要注意的是，"),a("code",[e._v("new web3.eth.Contract")]),e._v("这个构造函数。")]),e._v(" "),a("p",[e._v("进行"),a("code",[e._v("已有的合约交互")]),e._v(" vs"),a("code",[e._v("发布一个合约")]),e._v("的参数是不一样的。在部署时，需要传入当前的账户地址，而且还需要传入合约的字节码，表明你才是合约的发布者。")]),e._v(" "),a("p",[e._v("在和合约交互的时候，你要传入合约的地址，这样拿到的才是真正别人发布的合约。")]),e._v(" "),a("p",[e._v("这个也是我之前没理解的地方。因为我既发布了合约，又使用了合约。然后在使用合约的时候，直接将代码复制黏贴，一顿操作，结果一直没成功。")]),e._v(" "),a("h2",{attrs:{id:"收尾"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#收尾"}},[e._v("#")]),e._v(" 收尾")]),e._v(" "),a("p",[e._v("以上，就是我要分享的内容，希望能给像我一样的初学者带来帮助。")]),e._v(" "),a("p",[e._v("附上一些学习文档以及参考博客")]),e._v(" "),a("p",[a("strong",[e._v("官方Example")])]),e._v(" "),a("p",[e._v("https://solidity.readthedocs.io/en/latest/solidity-by-example.html#voting")]),e._v(" "),a("p",[a("strong",[e._v("合约手把手教程")])]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/cyrusadkisson/solidity-baby-steps",target:"_blank",rel:"noopener noreferrer"}},[e._v("solidity-baby-steps"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("参考资料")]),e._v(" "),a("p",[e._v("https://juejin.im/post/5b230ff7f265da59780b7aed")]),e._v(" "),a("p",[e._v("https://kauri.io/collection/5b8e401ee727370001c942e3")]),e._v(" "),a("h1",{attrs:{id:"erc-20"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#erc-20"}},[e._v("#")]),e._v(" ERC-20")]),e._v(" "),a("h2",{attrs:{id:"erc-20是什么？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#erc-20是什么？"}},[e._v("#")]),e._v(" erc-20是什么？")]),e._v(" "),a("blockquote",[a("p",[e._v("https://eips.ethereum.org/EIPS/eip-20")]),e._v(" "),a("p",[e._v("https://github.com/ethereum/EIPs/issues/20")])]),e._v(" "),a("p",[e._v("erc-20是一个协议，是dapp开发者约定的一个规范。需要声明token、")]),e._v(" "),a("p",[e._v("满足这个规范的合约，才能被钱包、交易所认可。")]),e._v(" "),a("div",{staticClass:"language-sol extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("pragma solidity ^0.4.24;\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n\n    /// @return token总发行数\n    function totalSupply() external view returns (uint256);\n\n    /// @param owner 需要查询余额的地址\n    /// @return 余额\n    function balanceOf(address owner) external view returns (uint256);\n\n    /// 从`msg.sender`的账户转移`value`数量的代币到`to`这个地址上\n    /// @notice 必须触发Transfer事件\n    /// @notice 出错需抛出异常\n    /// @param to 接收地址\n    /// @param value 待转移的数量\n    /// @return boolean 返回转账是否成功\n    function transfer(address to, uint256 value) external returns (bool);\n\n\n    /// 从`from`账户转移`value`数量的代币到`to`账户\n    /// @notice 必须触发Transfer事件\n    /// @param from 发送地址\n    /// @param to 接收地址\n    /// @param value 转移数量\n    /// @return 是否转账成功\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    /// 允许`spender`从`msg.sender`上提币，直到总数量超过value。\n    /// 如果这个方法被多次调用，覆盖value的值。\n    /// @param spender 被授权人，能够转移owner的代币\n    /// @param value 被授权的金额，单位 wei\n    /// @return 是否授权成功\n    function approve(address spender, uint256 value) external returns (bool);\n\n\n    /// @param owner 代币拥有者\n    /// @param spender 被授权人，能够转移owner的代币\n    /// @return 返回`spender`剩余能够转移的代币\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /// 记录转账事件\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    /// 记录授权事件\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n")])])]),a("h2",{attrs:{id:"如何开发一个erc-20代币"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何开发一个erc-20代币"}},[e._v("#")]),e._v(" 如何开发一个erc-20代币")]),e._v(" "),a("p",[e._v("实现一个代币最根本的是要维护一个帐本，然后根据交易来记录账本的变化。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('pragma solidity ^0.4.24;\n\nimport "./IERC20.sol";\nimport "./SafeMath.sol";\n\ncontract BaseERC20 is IERC20 {\n\n    using SafeMath for uint256;\n\n    string public constant name = "KeYang Coin";\n    string public constant symbol = "KYC";\n    uint8 public constant decimals = 18;\n\n    // 账本\n    mapping(address => uint256) balances;\n\n    // 授权\n    mapping(address => mapping(address => uint256)) allowed;\n\n    uint256 public totalSupply;\n\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n        totalSupply = totalSupply.add(value);\n        balances[account] = balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n\n    /// @return token总发行数\n    function totalSupply() external view returns (uint256) {\n        return totalSupply;\n    }\n\n    /// @param owner 需要查询余额的地址\n    /// @return 余额\n    function balanceOf(address owner) external view returns (uint256) {\n        return balances[owner];\n    }\n\n    function transfer(address to, uint256 value) external returns (bool) {\n        require(value > 0);\n        require(balances[msg.sender] >= value);\n        require(to != address(0));\n\n        balances[msg.sender] = balances[msg.sender].sub(value);\n        balances[to] = balances[to].add(value);\n        emit Transfer(msg.sender, to, value);\n\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool) {\n        require(value > 0);\n        require(balances[from] >= value);\n        require(allowed[from][msg.sender] >= value);\n        require(to != address(0));\n\n        balances[from] = balances[from].sub(value);\n        balances[to] = balances[to].add(value);\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(value);\n        emit Transfer(from, to, value);\n        return true;\n    }\n\n    /// 允许`spender`从`msg.sender`上提币，直到总数量超过value。\n    /// 如果这个方法被多次调用，覆盖value的值。\n    /// @param spender 被授权人，能够转移owner的代币\n    /// @param value 被授权的金额，单位 wei\n    /// @return 是否授权成功\n    function approve(address spender, uint256 value) external returns (bool) {\n        require(spender != address(0));\n        allowed[msg.sender][spender] = value;\n\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n\n    /// @param owner 代币拥有者\n    /// @param spender 被授权人，能够转移owner的代币\n    /// @return 返回`spender`剩余能够转移的代币\n    function allowance(address owner, address spender) external view returns (uint256) {\n        return allowed[owner][spender];\n    }\n}\n')])])]),a("h2",{attrs:{id:"如何保证erc-20代币的安全性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何保证erc-20代币的安全性"}},[e._v("#")]),e._v(" 如何保证erc-20代币的安全性")]),e._v(" "),a("h3",{attrs:{id:"api接口的建议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#api接口的建议"}},[e._v("#")]),e._v(" API接口的建议")]),e._v(" "),a("p",[e._v("在ERC-20的规范中，明确提出了一个建议：建议approve方法使用CAS机制；或者先设置value为0，再设置为另一个值。从而避免在2次approve之间，造成approve过的值的风险。")]),e._v(" "),a("p",[e._v("https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/edit#")]),e._v(" "),a("h3",{attrs:{id:"合约实现的建议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#合约实现的建议"}},[e._v("#")]),e._v(" 合约实现的建议")]),e._v(" "),a("p",[e._v("实现真正的合约时，使用经过别人验证的，安全的Library包 "),a("a",{attrs:{href:"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/9b3710465583284b8c4c5d2245749246bb2e0094/contracts/token/ERC20/ERC20.sol",target:"_blank",rel:"noopener noreferrer"}},[e._v("Openzeppelin-contract"),a("OutboundLink")],1),e._v(" 。")]),e._v(" "),a("h1",{attrs:{id:"众筹"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#众筹"}},[e._v("#")]),e._v(" 众筹")]),e._v(" "),a("p",[e._v("众筹其实也是基于代币的合约基础上，增加了募集资金的需求。所以相对于代币的业务，")]),e._v(" "),a("blockquote",[a("p",[e._v("增加了如下的字段：")])]),e._v(" "),a("ul",[a("li",[a("p",[e._v("众筹的时间期限、众筹的目标额度、已筹到的资金")])]),e._v(" "),a("li",[a("p",[e._v("众筹的收益人账户")])]),e._v(" "),a("li",[a("p",[e._v("代币兑换的价格")])]),e._v(" "),a("li",[a("p",[e._v("参与众筹的账户情况，根据这个明细来发放对应的代币")])])]),e._v(" "),a("blockquote",[a("p",[e._v("需要修改的逻辑：")])]),e._v(" "),a("ul",[a("li",[a("p",[e._v("众筹时，判断众筹时间是否已经到期，判断众筹额度是否已经达到目标")])]),e._v(" "),a("li",[a("p",[e._v("众筹结束时，判断众筹是否成功。")])]),e._v(" "),a("li",[a("p",[e._v("受益人提币时，判断众筹时间和众筹的结果，以及是否是受益人；")])]),e._v(" "),a("li",[a("p",[e._v("众筹结束后，如果成功，给参与众筹的人发放相应的代币")]),e._v(" "),a("p",[e._v("​\t如果失败，允许参与众筹的人提取eth。")])])]),e._v(" "),a("p",[e._v("发布到SWARM")]),e._v(" "),a("img",{staticStyle:{zoom:"43%"},attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2019-12-15-105134.png",alt:"image-20191215185134577"}}),e._v(" "),a("h1",{attrs:{id:"geth"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#geth"}},[e._v("#")]),e._v(" geth")]),e._v(" "),a("blockquote",[a("p",[e._v("https://juejin.im/post/5b0bbba46fb9a009de14c606")])]),e._v(" "),a("p",[e._v("geth命令，主要的Ethereum CLI客户端，是Ethereum网(main-, test- 或 private网)的入口，有能力作为一个full node(默认)存档节点(保留所有历史数据)或者一个light node(现场检索数据)节点运行。经由暴露在HTTP, WebSocket 或 IPC传输的顶部的JSON RPC端点，它可以被其他过程用作Ethereum网的网关。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("geth --rinkeby console \n")])])]),a("h1",{attrs:{id:"cobo-custody"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cobo-custody"}},[e._v("#")]),e._v(" cobo Custody")]),e._v(" "),a("p",[e._v("cobo是一个waas服务平台，其中包括30多种主流区块链和800多种代币的 收币、发币等功能。")])])}),[],!1,null,null,null);t.default=s.exports}}]);