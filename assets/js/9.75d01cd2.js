(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{368:function(s,t,a){"use strict";a.r(t);var e=a(25),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"docker学习"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker学习"}},[s._v("#")]),s._v(" Docker学习")]),s._v(" "),a("h2",{attrs:{id:"docker能干嘛？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker能干嘛？"}},[s._v("#")]),s._v(" Docker能干嘛？")]),s._v(" "),a("p",[s._v("容器里可以将应用极其依赖包一起标准化打包，可以运行在任何环境，不依赖操作系统。")]),s._v(" "),a("p",[s._v("以image的形式发布共享。")]),s._v(" "),a("ul",[a("li",[s._v("简化配置")]),s._v(" "),a("li",[s._v("流水线式生产")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2020-03-20-80922.jpg",alt:"image-20190531075507077"}})]),s._v(" "),a("p",[s._v("docker和传统虚拟化技术的区别在于：")]),s._v(" "),a("p",[s._v("传统的虚拟机是需要包含操作系统的，它的虚拟化是基于硬件；")]),s._v(" "),a("p",[s._v("而docker容器，只包含应用以及应用程序的依赖项，以独立的进程运行在操作系统的用户空间上，共享着操作系统的kernel。")]),s._v(" "),a("h2",{attrs:{id:"docker技术概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker技术概述"}},[s._v("#")]),s._v(" Docker技术概述")]),s._v(" "),a("h3",{attrs:{id:"docker技术基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker技术基础"}},[s._v("#")]),s._v(" Docker技术基础")]),s._v(" "),a("p",[s._v("namespace：docker基于namespace来进行隔离。")]),s._v(" "),a("p",[s._v("control groups：docker资源统计和隔离。")]),s._v(" "),a("p",[s._v("union file system:  分层镜像实现的基础")]),s._v(" "),a("h3",{attrs:{id:"docker组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker组件"}},[s._v("#")]),s._v(" Docker组件")]),s._v(" "),a("p",[s._v("docker client  向进程发送命令")]),s._v(" "),a("p",[s._v("docker daemon 服务进程用来接收client发送的命令")]),s._v(" "),a("p",[s._v("docker registry 镜像仓库")]),s._v(" "),a("h3",{attrs:{id:"docker-machine-vs-docker-engine"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-machine-vs-docker-engine"}},[s._v("#")]),s._v(" Docker Machine VS Docker Engine")]),s._v(" "),a("p",[a("strong",[s._v("Docker Engine")]),s._v(": 也就是我们所说的docker，它是一个CS模型。")]),s._v(" "),a("p",[s._v("包含3个部分：")]),s._v(" "),a("ul",[a("li",[s._v("Docker Daemon — docker 的守护进程，属于C/S中的server")]),s._v(" "),a("li",[s._v("Docker REST API — docker daemon向外暴露的REST 接口")]),s._v(" "),a("li",[s._v("Docker CLI — docker向外暴露的命令行接口（Command Line API）")])]),s._v(" "),a("p",[a("code",[s._v("client")]),s._v(" 通过 "),a("code",[s._v("rest api")]),s._v(" 向"),a("code",[s._v("server")]),s._v(" 发送请求。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2020-03-20-105519.png",alt:"engine"}})]),s._v(" "),a("p",[a("strong",[s._v("Docker Machine")]),s._v("：是一个工具，用来在虚拟主机上安装Docker Engine。")]),s._v(" "),a("p",[s._v("可以通过"),a("code",[s._v("docker-machine")]),s._v("命令来连接、管理这些主机上的Engine")]),s._v(" "),a("p",[s._v("他和server之间的关系就像下图：")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2020-03-20-112550.png",alt:"machine"}})]),s._v(" "),a("h2",{attrs:{id:"docker安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker安装"}},[s._v("#")]),s._v(" Docker安装")]),s._v(" "),a("h3",{attrs:{id:"在mac上装docker"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#在mac上装docker"}},[s._v("#")]),s._v(" 在mac上装Docker")]),s._v(" "),a("p",[s._v("本地安装docker有几种方式：")]),s._v(" "),a("ul",[a("li",[s._v("直接安装，缺点是容易有一堆image，不好删除；")]),s._v(" "),a("li",[a("s",[s._v("通过Vmware虚拟化直接来装，缺点是OS太大，而且不免费")])]),s._v(" "),a("li",[s._v("通过Vagrant + VirtualBox装虚拟机，然后安装docker ==(推荐)==")]),s._v(" "),a("li",[s._v("通过docker-machine来快速搭建")])]),s._v(" "),a("p",[s._v("学习的时候，因为参考着视频，所以就通过vagrant来安装的，免得镜像一大堆，到时候想删除都不好删除。")]),s._v(" "),a("p",[s._v("安装教程：参考官网的教程进行安装"),a("a",{attrs:{href:"https://docs.docker.com/install/linux/docker-ce/centos/",target:"_blank",rel:"noopener noreferrer"}},[s._v("centos上安装docker"),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("后面了解到安装docker可以通过"),a("a",{attrs:{href:"https://docs.docker.com/docker-for-mac/docker-toolbox/",target:"_blank",rel:"noopener noreferrer"}},[s._v("docker toolbox"),a("OutboundLink")],1),s._v("的方式安装。")]),s._v(" "),a("p",[s._v("docker toolbox里包含了几个组成：")]),s._v(" "),a("ul",[a("li",[a("em",[s._v("docker-cli")]),s._v(" : 客户端命令行,目前的版本是19.03.1")]),s._v(" "),a("li",[a("em",[s._v("docker-machine")]),s._v(" : 可以在本机启动用于Docker Engine虚拟机并管理他们")]),s._v(" "),a("li",[a("em",[s._v("docker-compose")]),s._v(" : docker提供的编排工具，支持compose文件，这个并不常用。")]),s._v(" "),a("li",[a("em",[s._v("Kitematic")]),s._v(" : Docker的客户端GUI，官方已经废弃了。")]),s._v(" "),a("li",[a("em",[s._v("Boot2Docker ISO")]),s._v(": 用于创建Docker Engine虚拟机的镜像。由于包中的这个版本并不是最新的，所以创建虚拟机的时候可能会需要重新下载。")]),s._v(" "),a("li",[a("em",[s._v("VirtualBox")]),s._v(" : 虚拟机")])]),s._v(" "),a("p",[s._v("实际上就是本地用了一下docker-machine，然后通过docker-machine去连接虚拟机的docker-engine, 或者阿里云的docker-engine。")]),s._v(" "),a("p",[a("strong",[s._v("附")])]),s._v(" "),a("p",[a("strong",[s._v("启动docker命令")])]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" systemctl start docker\n")])])]),a("p",[a("strong",[s._v("docker-machine命令")])]),s._v(" "),a("blockquote",[a("p",[s._v("创建一个docker")])]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("docker-machine create demo\n")])])]),a("p",[s._v("会用到最新的镜像iso，如果下载失败可以用迅雷下载"),a("a",{attrs:{href:"https://github.com/boot2docker/boot2docker/releases",target:"_blank",rel:"noopener noreferrer"}},[s._v("最新版本"),a("OutboundLink")],1),s._v("，然后放到"),a("code",[s._v("/Users/keyang/.docker/machine/machines/default")]),s._v("目录下.")]),s._v(" "),a("blockquote",[a("p",[s._v("查看本地有哪可以连接的docker主机")])]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("docker-machine ls\n")])])]),a("p",[a("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2020-03-21-132850.png",alt:"image-20200321212849799"}})]),s._v(" "),a("blockquote",[a("p",[s._v("连接、停止、删除")])]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("docker-machine "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ssh")]),s._v(" demo\ndocker-machine stop demo\ndocker-machine "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" demo\n")])])]),a("p",[a("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2020-03-21-133057.png",alt:"image-20200321213057626"}})]),s._v(" "),a("blockquote",[a("p",[s._v("Docker 去连接 虚拟机的 docker engine")])]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("docker-machine "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("env")]),s._v(" xxx // 查看docker-machine的配置\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("eval")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),s._v("docker-machine "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("env")]),s._v(" xxx"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v(" // 连接远程docker-machine\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("eval")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),s._v("docker-machine "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("env")]),s._v(" --unset"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v(" // 取消连接远程\n")])])]),a("p",[a("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2020-03-21-133500.png",alt:"image-20200321213500420"}})]),s._v(" "),a("h3",{attrs:{id:"在云上安装docker"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#在云上安装docker"}},[s._v("#")]),s._v(" 在云上安装Docker")]),s._v(" "),a("p",[s._v("现在很多云服务商都提供了docker的云服务，比如：")]),s._v(" "),a("ul",[a("li",[s._v("AWS的ECS服务")]),s._v(" "),a("li",[s._v("Aliyun的Container Service")])]),s._v(" "),a("blockquote",[a("p",[s._v("阿里云创建")])]),s._v(" "),a("p",[s._v("我们可以通过docker-machine去在阿里云上去创建一个docker。")]),s._v(" "),a("p",[s._v("1.本地安装docker-machine")]),s._v(" "),a("p",[s._v("2.在阿里云查看driver， https://github.com/AliyunContainerService/docker-machine-driver-aliyunecs")]),s._v(" "),a("p",[s._v("3.将driver重命名，并且设置到环境变量中。")]),s._v(" "),a("p",[a("code",[s._v("docker-machine-driver-aliyunecs.darwin-amd64 => docker-machine-driver-aliyunecs")])]),s._v(" "),a("p",[s._v("移动到"),a("code",[s._v("/usr/local/bin")]),s._v("目录下")]),s._v(" "),a("p",[s._v("4.确认driver是否安装成功")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("docker-machine create -d aliyunecs --help\n")])])]),a("p",[s._v("5.创建阿里云的docker-machin ，指明accessKey和secertKey")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("docker-machine create -d aliyunecs --aliyunecs-io-optimized\toptimized --aliyunecs-instance-type\tecs.g5.large --aliyunecs-access-key-id "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${access-key}")]),s._v(" --aliyunecs-access-key-secret "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${access-key-secret}")]),s._v(" --aliyunecs-region cn-qingdao coda-demo\n")])])]),a("p",[s._v("完成以上步骤后，如果想要连接docker-machine，可以用下面的命令")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("docker-machine "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("env")]),s._v(" xxx // 查看docker-machine的配置\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("eval")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),s._v("docker-machine "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("env")]),s._v(" xxx"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v(" // 连接远程docker-machine\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("eval")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),s._v("docker-machine "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("env")]),s._v(" --unset"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v(" // 取消连接远程\n")])])]),a("blockquote",[a("p",[s._v("在AWS上安装")])]),s._v(" "),a("p",[s._v("https://docs.docker.com/machine/examples/aws/")]),s._v(" "),a("p",[s._v("1.拿到access key")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2020-03-21-140204.png",alt:"image-20200321220204504"}})]),s._v(" "),a("p",[s._v("2.设置indentity")]),s._v(" "),a("p",[s._v("3.创建machine")]),s._v(" "),a("p",[s._v("我这边创建实例总是报错，说账户被锁住了，所以没成功。")]),s._v(" "),a("h2",{attrs:{id:"docker架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker架构"}},[s._v("#")]),s._v(" Docker架构")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2020-03-20-080924.jpg",alt:"image-20190531215056494"}})]),s._v(" "),a("h3",{attrs:{id:"docker-image-docker镜像"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-image-docker镜像"}},[s._v("#")]),s._v(" Docker Image (Docker镜像)")]),s._v(" "),a("p",[a("strong",[s._v("Docker Image的概念图")])]),s._v(" "),a("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2020-03-22-003643.jpg",width:"400px"}}),s._v(" "),a("p",[s._v("linux操作系统分为内核空间和用户空间。")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("bootfs：内核空间")])]),s._v(" "),a("li",[a("p",[s._v("rootfs：用户空间")])])]),s._v(" "),a("p",[s._v("操作系统是挂载在用户空间上的，他们被称为Base Image。")]),s._v(" "),a("p",[a("strong",[s._v("Docker的Image的定义")])]),s._v(" "),a("p",[s._v("镜像（Image）就是一堆只读层（read-only layer）的统一视角。")]),s._v(" "),a("p",[s._v("什么意思？")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2020-03-22-004424.png",alt:"2.png"}})]),s._v(" "),a("p",[s._v("左边是一堆只读层的层叠，每一层都有一个指针指向下一层。")]),s._v(" "),a("p",[s._v("Docker的 "),a("code",[s._v("统一文件系统（union file system）")]),s._v("技术能够将不同的层整合成一个文件系统，为这些层提供了一个统一的视角，隐藏了多层的存在。在用户的角度看来，只存在一个文件系统。")]),s._v(" "),a("p",[s._v("==不同的Image可以去整合不同的layer，也可以从一个Image上去修改，生成一个新的Image。==")]),s._v(" "),a("p",[s._v("所以也就理解了第一张图的结构。 Image#4是在Image#2的上面，且Image#4和Image#2共享Centos Image。")]),s._v(" "),a("p",[s._v("Image是read-only的")]),s._v(" "),a("h5",{attrs:{id:"docker-image的获取"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-image的获取"}},[s._v("#")]),s._v(" Docker Image的获取")]),s._v(" "),a("p",[s._v("从Docker Hub的Registry中拉取Base Image")]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 拉取 hello world")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("vagrant@docker-host ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("$ docker pull hello-world\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("vagrant@docker-host ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("$ docker run hello-world\n")])])]),a("p",[s._v("通过Dockerfile来build，创建一个Base Image")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#1. 创建一个简单的可执行文件，如c语言的执行文件")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v("\nhello  hello.c\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#2. 创建自己的Dockerfile")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("touch")]),s._v(" Dockerfile\nFROM scratch\nADD hello /\nCMD "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#3. 从当前目录build docker")]),s._v("\n$ docker build -t coda/hello-gpp "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\n")])])]),a("h5",{attrs:{id:"docker-image删除"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-image删除"}},[s._v("#")]),s._v(" Docker Image删除")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("$ docker rmi hello-world\n")])])]),a("h3",{attrs:{id:"docker-container-容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-container-容器"}},[s._v("#")]),s._v(" Docker Container (容器)")]),s._v(" "),a("h5",{attrs:{id:"docker-container的定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-container的定义"}},[s._v("#")]),s._v(" Docker Container的定义")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2020-03-22-005115.png",alt:"3.png"}})]),s._v(" "),a("p",[s._v("container和image的定义一模一样，只不过container在image的基础上，多了一层可读写的layer。")]),s._v(" "),a("p",[s._v("contaienr通过Image来创建。")]),s._v(" "),a("p",[s._v("container和image的关系就类似于面向对象编程中的class和实例的关系；image是class，contaienr是实例；")]),s._v(" "),a("p",[s._v("Image负责app的存储和分发；Contaienr负责运行app；")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2020-03-20-080916.jpg",alt:"image-20190602103452930"}})]),s._v(" "),a("h5",{attrs:{id:"创建docker-container"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建docker-container"}},[s._v("#")]),s._v(" 创建Docker Container")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("最简单的方式：直接run image")]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("vagrant@docker-host hello-gpp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("$ docker run coda/hello-gpp\n")])])])]),s._v(" "),a("li",[a("p",[s._v("创建可交互式的container")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("[vagrant@docker-host hello-gpp]$ docker run -it centos\n")])])])])]),s._v(" "),a("h2",{attrs:{id:"docker-相关命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-相关命令"}},[s._v("#")]),s._v(" Docker 相关命令")]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("docker "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看docker中所有contaienr")]),s._v("\ndocker "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" -it "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${cotainerid}")]),s._v(" /bin/bash "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 可交互式的进入到容器中")]),s._v("\ndocker logs\ndocker stop/start \ndocker inspect "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看container信息")]),s._v("\n")])])]),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看docker中所有contaienr")]),s._v("\n$ docker container "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" -a \n$ docker "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 作用一样")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看所有docker images")]),s._v("\n$ docker images \n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除contaienr")]),s._v("\n$ docker container "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" -aq "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 列出所有container的id")]),s._v("\n$ docker stop "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),s._v("docker container "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" -aq"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#停止所有的container")]),s._v("\n$ docker "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),s._v("docker container "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" -aq"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v("  \n")])])]),a("h3",{attrs:{id:"运行container"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运行container"}},[s._v("#")]),s._v(" ==运行container==")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("docker run -p 80:80 -d image\n")])])]),a("h3",{attrs:{id:"停止所有的container"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#停止所有的container"}},[s._v("#")]),s._v(" ==停止所有的container==")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("docker stop $(docker container ls -aq)\n")])])]),a("h3",{attrs:{id:"删除所有的container"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除所有的container"}},[s._v("#")]),s._v(" ==删除所有的container==")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("docker rm $(docker container ls -aq)\n")])])]),a("h3",{attrs:{id:"运行一个nginx"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运行一个nginx"}},[s._v("#")]),s._v(" ==运行一个nginx==")]),s._v(" "),a("p",[s._v("1.创建一个dokcerfile")]),s._v(" "),a("div",{staticClass:"language-dockerfile extra-class"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" nginx\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COPY")]),s._v(" dist/* /home/docker/static"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("htmls/\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("copy")]),s._v(" static.conf /etc/nginx/conf.d\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("expose")]),s._v(" 8080\n")])])]),a("p",[s._v("2.build image")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("$ docker build -t docker-nginx "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\n")])])]),a("p",[s._v("3.创建一个container")]),s._v(" "),a("p",[s._v("因为是在虚拟机上运行的，所以还要 映射"),a("code",[s._v("宿主端口")]),s._v("和"),a("code",[s._v("容器端口")]),s._v(": "),a("code",[s._v("-p <宿主端口>:<容器端口>")])]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("$ docker run -d -p "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8080")]),s._v(":8080 docker-nginx "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 容器端口是后面的8080，我们是访问的宿主端口是安装docker的机器端口")]),s._v("\n")])])]),a("p",[s._v("4.看一下container运行的情况")]),s._v(" "),a("p",[a("code",[s._v("$ docker ps")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2020-03-22-021134.png",alt:"image-20200322101133883"}})]),s._v(" "),a("p",[s._v("5.访问宿主的host+端口")]),s._v(" "),a("p",[s._v("宿主的host就是在docker上访问ifconfig 拿到对应的ip地址，比如192.168.0.101。再带上端口去访问就可以了；")]),s._v(" "),a("p",[s._v("http://192.168.99.100:8080/#")]),s._v(" "),a("h2",{attrs:{id:"维护自己的image"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#维护自己的image"}},[s._v("#")]),s._v(" 维护自己的Image")]),s._v(" "),a("p",[s._v("方法1：commit新的base image")]),s._v(" "),a("blockquote",[a("p",[s._v("不要使用这种方式，不好管理")])]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("vagrant@docker-host ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("$ docker commit agitated_panini coda/centos-vim "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# agitated_panini是container的名称")]),s._v("\n")])])]),a("p",[s._v("方法2：通过Dockerfile来创建base image")]),s._v(" "),a("div",{staticClass:"language-dockerfile extra-class"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" centos\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" yum install "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("y vim\n")])])]),a("p",[a("strong",[s._v("==推荐：尽量用dockerfile来build，避免安全问题==")])]),s._v(" "),a("h3",{attrs:{id:"dockerfile语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile语法"}},[s._v("#")]),s._v(" Dockerfile语法")]),s._v(" "),a("blockquote",[a("p",[s._v("FROM")])]),s._v(" "),a("p",[s._v("指定base image以及版本号，==尽量用官方的==")]),s._v(" "),a("div",{staticClass:"language-dockerfile extra-class"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" scratch "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 重头制作base image (hello world image)")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" centos "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 在centos基础上来制作base image")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" ubuntu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("14.04\n")])])]),a("blockquote",[a("p",[s._v("LABEL")])]),s._v(" "),a("p",[s._v("用来定义image的meta data信息")]),s._v(" "),a("div",{staticClass:"language-dockerfile extra-class"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("LABEL")]),s._v(" maintainer="),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"gunner6@163.com"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 作者")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("LABEL")]),s._v(" version="),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1.0"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 版本")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("LABEL")]),s._v(" description="),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"xxx"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 描述信息")]),s._v("\n")])])]),a("blockquote",[a("p",[s._v("RUN")])]),s._v(" "),a("p",[s._v("执行命令")]),s._v(" "),a("p",[s._v("需要注意一点，run每执行一次，都会进行分层。所以尽量合并成一条语句。")]),s._v(" "),a("div",{staticClass:"language-dockerfile extra-class"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" yum update && yum install "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("y vim python"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("dev\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" apt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("get update && apt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("get install "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("y perl \\\n\tpwgen "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("no"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("install"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("recommennds && \\\n\trm "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("rf /var/lib/apt/lists/* "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 如果命令太长，不好阅读，可以通过\\换行，美化代码")]),s._v("\n")])])]),a("blockquote",[a("p",[s._v("WORKDIR")])]),s._v(" "),a("p",[s._v("设定当前工作目录")]),s._v(" "),a("p",[s._v("==使用WORKDIR，不用RUN cd==")]),s._v(" "),a("p",[s._v("==尽量用绝对目录==")]),s._v(" "),a("div",{staticClass:"language-dockerfile extra-class"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WORKDIR")]),s._v(" /root "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 绝对目录 改变当前目录,进入到root中")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WORKDIR")]),s._v(" /test "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 如果没有test目录，会自动创建test目录")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WORKDIR")]),s._v(" demo  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 相对目录")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" PWD "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 输出/test/demo")]),s._v("\n\n")])])]),a("blockquote",[a("p",[s._v("ADD or COPY")])]),s._v(" "),a("p",[s._v("ADD 不仅可以添加文件到根目录，还==可以自动进行解压==")]),s._v(" "),a("p",[s._v("==优先考虑使用COPY==")]),s._v(" "),a("p",[s._v("添加远程文件/目录，用curl或者wget")]),s._v(" "),a("div",{staticClass:"language-dockerfile extra-class"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ADD")]),s._v(" hello / "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 把hello这个文件添加到更目录下面")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ADD")]),s._v(" test.tar.gz / "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 把test.tar.gz这个添加到更目录下面并且解压")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WORKDIR")]),s._v(" /root "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 切换当前目录")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ADD")]),s._v(" hello test/  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 将hello添加到/root/test/hello")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WORKDIR")]),s._v(" /root\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COPY")]),s._v(" hello test/  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# /root/test/hello")]),s._v("\n")])])]),a("blockquote",[a("p",[s._v("ENV")])]),s._v(" "),a("p",[s._v("可以使用ENV来设置常量")]),s._v(" "),a("div",{staticClass:"language-dockerfile extra-class"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 尽量用env来增加常亮可维护性")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENV")]),s._v(" MYSQL_VERSION 5.6 "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置常量")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" apt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("get install "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("y mysql"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("server="),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"${MYSQL_VERSION}"')]),s._v(" \\\n\t&& rm "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("rf /var/lib/apt/lists/* "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 引用变量")]),s._v("\n")])])]),a("blockquote",[a("p",[s._v("VOLUME & EXPOSE")])]),s._v(" "),a("p",[s._v("存储网络和网络")]),s._v(" "),a("p",[s._v("EXPOSE可以暴露docker container的端口")]),s._v(" "),a("blockquote",[a("p",[s._v("RUN & CMD & ENTRYPOINT")])]),s._v(" "),a("p",[s._v("RUN 用来执行命令，并且创建新的ImageLayer")]),s._v(" "),a("p",[s._v("CMD 设置容器==启动后默认执行==的命令和参数")]),s._v(" "),a("p",[s._v("ENTRYPOINT 设置容器==启动时==运行的命令")]),s._v(" "),a("p",[a("strong",[s._v("两种命令格式：")])]),s._v(" "),a("ul",[a("li",[s._v("Shell 格式")])]),s._v(" "),a("div",{staticClass:"language-dockerfile extra-class"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" apt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("get install "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("y vim\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CMD")]),s._v(" echo "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello docker"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENTRYPOINT")]),s._v(" echo "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello docker"')]),s._v("\n")])])]),a("ul",[a("li",[s._v("Exec 格式")])]),s._v(" "),a("p",[s._v("写一个字符串数组，以“,”分割")]),s._v(" "),a("div",{staticClass:"language-dockerfile extra-class"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"apt-get"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"install"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-y"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"vim"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CMD")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"bin/echo"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello docker"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENTRYPOINT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/bin/echo"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello docker"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),a("p",[a("strong",[s._v("举个例子")])]),s._v(" "),a("p",[s._v("我有2个dockerfile，代码分别如下")]),s._v(" "),a("div",{staticClass:"language-dockerfile extra-class"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#dockerfile1")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" centos\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENV")]),s._v(" name Docker\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENTRYPOINT")]),s._v(" echo "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello $name"')]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#dockerfile2")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" centos\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENV")]),s._v(" name Docker\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENTRYPOINT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/bin/echo"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello $name"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),a("p",[s._v("上面的image run出来的container，打印的是hello Docker.")]),s._v(" "),a("p",[s._v("但是下面的image run出来的结果是 hello $name;")]),s._v(" "),a("p",[s._v("原因是因为：在shell格式下，变量能被识别。但是用exce的格式下，它执行的是命令，不是通过shell来执行的，==需要我们通过参数指明通过什么来执行==")]),s._v(" "),a("p",[s._v("将下面的dockerfile修改如下")]),s._v(" "),a("div",{staticClass:"language-dockerfile extra-class"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" centos\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENV")]),s._v(" name Docker\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENTRYPOINT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/bin/bash"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-c"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"echo hello $name"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),a("p",[a("strong",[s._v("CMD")])]),s._v(" "),a("p",[s._v("容器启动时，默认执行的命令。")]),s._v(" "),a("p",[s._v("如果"),a("code",[s._v("docker run")]),s._v("指定了其他命令，CMD会被忽略。比如，"),a("code",[s._v("docker run -it image /bin/bash")]),s._v("，cmd就不会执行了。")]),s._v(" "),a("p",[s._v("如果定义了多个CMD，只有最后一个会被执行")]),s._v(" "),a("p",[a("strong",[s._v("ENTRYPOINT")])]),s._v(" "),a("p",[s._v("不会被忽略，一定会执行。")]),s._v(" "),a("p",[s._v("一般用来让容器以应用程序或者服务的形式运行。")]),s._v(" "),a("p",[a("strong",[s._v("CMD 和 ENTRYPOINT的区别")])]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("区别")]),s._v(" "),a("th",[s._v("CMD")]),s._v(" "),a("th",[s._v("ENTRYPOINT")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[s._v("最佳实践")]),s._v(" "),a("td"),s._v(" "),a("td",[s._v("==写一个shell脚本作为entrypoint==")])]),s._v(" "),a("tr",[a("td",[s._v("作用")]),s._v(" "),a("td",[s._v("设置容器启动后默认执行的命令和参数")]),s._v(" "),a("td",[s._v("执行应用程序")])]),s._v(" "),a("tr",[a("td",[s._v("执行")]),s._v(" "),a("td",[s._v("如果docker run指定了其他命令或者参数，CMD里面命令会被忽略")]),s._v(" "),a("td",[s._v("ENTRYPOINT不会被忽略, 一定会执行")])])])]),s._v(" "),a("h3",{attrs:{id:"发布docker-image"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#发布docker-image"}},[s._v("#")]),s._v(" 发布docker image")]),s._v(" "),a("h4",{attrs:{id:"_1-注册docker-hub账户密码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-注册docker-hub账户密码"}},[s._v("#")]),s._v(" 1.注册docker hub账户密码")]),s._v(" "),a("h4",{attrs:{id:"_2-在terminal登录docker-hub账户密码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-在terminal登录docker-hub账户密码"}},[s._v("#")]),s._v(" 2.在terminal登录docker hub账户密码")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("$ docker login\nUsername: gunner6\nPassword:\nWARNING"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v(" Your password will be stored unencrypted "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" /Users/keyang/.docker/config.json.\nConfigure a credential helper to remove this warning. See\nhttps://docs.docker.com/engine/reference/commandline/login/"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#credentials-store")]),s._v("\n\nLogin Succeeded\n")])])]),a("h4",{attrs:{id:"_3-push-docker-image"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-push-docker-image"}},[s._v("#")]),s._v(" 3.push docker image")]),s._v(" "),a("p",[a("code",[s._v("docker push [OPTIONS] NAME[:TAG]")])]),s._v(" "),a("p",[s._v("NAME需要是一个"),a("code",[s._v("dockerId/project")]),s._v("的格式")]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ docker push gunner6/hello-gpp:latest\nThe push refers to repository "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("docker.io/gunner6/hello-gpp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\nc0d1d7ec5bba: Pushed\n")])])]),a("h4",{attrs:{id:"_4-拉取docker-image"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-拉取docker-image"}},[s._v("#")]),s._v(" 4.拉取docker image")]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ docker pull gunner6/hello-gpp\n")])])]),a("h3",{attrs:{id:"搭建私有的docker-registry"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#搭建私有的docker-registry"}},[s._v("#")]),s._v(" 搭建私有的docker registry")]),s._v(" "),a("p",[s._v("https://docs.docker.com/registry/deploying/")]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#1. 拉取docker registry")]),s._v("\n$ docker pull registry\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#2. 运行dokcer hub ")]),s._v("\n$ docker run -d -p "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5000")]),s._v(":5000 --restart always --name registry registry:2\n\n\n")])])]),a("p",[s._v("完成以上步骤后，就相当于启动了一个docker registry了。")]),s._v(" "),a("blockquote",[a("p",[s._v("推送Image到私有仓库")])]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("$ docker tag gunner6/hello-gpp:latest localhost:5000/hello-gpp\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#3. push image 到本地镜像")]),s._v("\n$ docker push localhost:5000/hello-gpp\n")])])]),a("p",[s._v("上面是localhost，如果是在一个远程的服务上搭建私有仓库，push或pull的时候会出现不安全的提示，那是因为docker默认只支持https的服务。")]),s._v(" "),a("p",[s._v("好在Docker允许去推送non-distributable layers到私有仓库")]),s._v(" "),a("p",[s._v("1.修改本地"),a("code",[s._v("/etc/docker/daemon.json")])]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"allow-nondistributable-artifacts"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"myregistrydomain.com:5000"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("p",[s._v("2.重启docker")]),s._v(" "),a("p",[a("code",[s._v("sudo service docker restart")])]),s._v(" "),a("p",[s._v("因为我用的是toolbox的方式，所以不太一样")]),s._v(" "),a("p",[s._v("1.修改profile文件")]),s._v(" "),a("p",[s._v("编辑 /var/lib/boot2docker/profile文件，\n在 "),a("code",[s._v("--label provider=virtualbox")]),s._v(" 的下一行添加下述代码\n"),a("code",[s._v("--insecure-registry xxx.xxx.xxx.xxx:yyy")])]),s._v(" "),a("p",[s._v("2.重启docker")]),s._v(" "),a("p",[a("code",[s._v("sudo /etc/init.d/docker restart")])]),s._v(" "),a("p",[s._v("或者")]),s._v(" "),a("p",[a("code",[s._v("docker-machine restart")])]),s._v(" "),a("p",[s._v("做完上面2步后就可以推送了")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2020-03-22-125710.png",alt:"image-20200322205710047"}})]),s._v(" "),a("p",[s._v("通过接口确认已经上传成功 http://39.107.26.141:5000/v2/_catalog")]),s._v(" "),a("h2",{attrs:{id:"怎么去配置docker-machine的镜像？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#怎么去配置docker-machine的镜像？"}},[s._v("#")]),s._v(" 怎么去配置docker-machine的镜像？")]),s._v(" "),a("p",[s._v("https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors")]),s._v(" "),a("h2",{attrs:{id:"怎么去调试我的image"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#怎么去调试我的image"}},[s._v("#")]),s._v(" 怎么去调试我的image")]),s._v(" "),a("p",[s._v("在运行错误的步骤上，执行 run -it")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("docker run -it 6a499438b095\n")])])]),a("p",[a("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2020-05-09-120155.png",alt:"image-20200509200154366"}})]),s._v(" "),a("h2",{attrs:{id:"实战-stress"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实战-stress"}},[s._v("#")]),s._v(" 实战-stress")]),s._v(" "),a("p",[s._v("dockerfile")]),s._v(" "),a("div",{staticClass:"language-dockerfile extra-class"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" ubuntu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("14.04\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" apt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("get update && apt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("get install "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("y stress\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENTRYPOINT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/usr/bin/stress"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CMD")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),a("p",[s._v("指明参数去运行")]),s._v(" "),a("p",[a("code",[s._v("docker run -it stress --cpu 8 --io 4 --vm 2 --vm-bytes 128M --timeout 10s")])]),s._v(" "),a("p",[a("strong",[s._v("总结一下")])]),s._v(" "),a("p",[s._v("通过"),a("code",[s._v("ENTRYPOINT")]),s._v("和"),a("code",[s._v("CMD")]),s._v("结合，可以实现一个接收命令行参数的image。")]),s._v(" "),a("p",[s._v("通过 -it + 参数的形式去运行，可以在CMD里去接收参数，最终传给ENTRYPOINT。")]),s._v(" "),a("h3",{attrs:{id:"如何去debug-dockerfile"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何去debug-dockerfile"}},[s._v("#")]),s._v(" 如何去debug dockerfile")]),s._v(" "),a("p",[s._v("dockerfile运行每一步都会创建临时镜像")]),s._v(" "),a("p",[s._v("哪一步出错了，可以进入临时镜像去看一下")]),s._v(" "),a("p",[s._v("执行下面命令：")]),s._v(" "),a("p",[a("code",[s._v("docker run -it ${imageid} /bin/bash")])]),s._v(" "),a("hr"),s._v(" "),a("h2",{attrs:{id:"docker网络-未完待续"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker网络-未完待续"}},[s._v("#")]),s._v(" Docker网络(未完待续)")]),s._v(" "),a("h3",{attrs:{id:"网络基础知识"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#网络基础知识"}},[s._v("#")]),s._v(" 网络基础知识")]),s._v(" "),a("p",[s._v("网络类型")]),s._v(" "),a("img",{staticStyle:{zoom:"44%"},attrs:{src:"http://ww2.sinaimg.cn/large/006tNc79ly1g3s8jrcg6mj30yw0oyq9h.jpg",width:"500"}}),s._v(" "),a("p",[a("strong",[s._v("网络分层模型")])]),s._v(" "),a("p",[s._v("​\tISO/OSI 7层分层")]),s._v(" "),a("p",[s._v("​\tTCP/IP 5层分层模型")]),s._v(" "),a("p",[s._v("​\t\t应用层  （ftp协议、http协议）")]),s._v(" "),a("p",[s._v("​\t\t传输层  （TCP协议、UDP协议）")]),s._v(" "),a("p",[s._v("​\t\tIP层  （IP数据报）")]),s._v(" "),a("p",[s._v("​\t\t链路 （网络接口协议）")]),s._v(" "),a("p",[s._v("​\t\t物理层 （网线、光纤）")]),s._v(" "),a("p",[a("strong",[s._v("网络路由")])]),s._v(" "),a("p",[s._v("​\t网络中去访问服务器，是通过路由器去自动查找路径的。路由器是中间的转化器")]),s._v(" "),a("p",[a("strong",[s._v("公有IP、私有IP")])]),s._v(" "),a("p",[s._v("​\t公有类型")]),s._v(" "),a("p",[s._v("​\t\t互联网上唯一标识")]),s._v(" "),a("p",[s._v("​\t私有类型 （不可以在互联网上使用，只有在内部使用）")]),s._v(" "),a("p",[s._v("​\t\tA类 10.0.0.0 ~ 10.255.255.255.255")]),s._v(" "),a("p",[s._v("​\t\tB类 172.16.0.0 ~ 172.31.255.255")]),s._v(" "),a("p",[s._v("​\t\tC类 192.168.0.0 ~ 192.168.255.255")]),s._v(" "),a("p",[a("strong",[s._v("NAT 网络地址转化")])]),s._v(" "),a("p",[s._v("NAT会将私有类型的地址转换成公网地址，记录在翻译表里。等得到数据后，再将公有地址，转化为私有地址。")]),s._v(" "),a("p",[s._v("​\t网络地址转化端口翻译。将内网的地址转换成公网地址")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2020-03-20-080919.jpg",alt:"image-20190607075056727"}})]),s._v(" "),a("p",[a("strong",[s._v("ping")])]),s._v(" "),a("p",[s._v("​\t验证ip的可达性")]),s._v(" "),a("p",[a("strong",[s._v("telnet")])]),s._v(" "),a("p",[s._v("​\t验证服务端口的可用性")]),s._v(" "),a("h3",{attrs:{id:"网络命名空间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#网络命名空间"}},[s._v("#")]),s._v(" 网络命名空间")]),s._v(" "),a("h4",{attrs:{id:"docker-network-namespace"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-network-namespace"}},[s._v("#")]),s._v(" Docker Network Namespace")]),s._v(" "),a("blockquote",[a("p",[s._v("docker在创建容器时，会同时创建独立的network namespace。如下所示")])]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("vagrant@docker-node1 labs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("$ docker run -d --name test1 busybox /bin/sh -c "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"while true; do sleep 3600; done"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 启用run命令创建一个container，将其命名为test1，使用的镜像为用busybox")]),s._v("\n")])])]),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("vagrant@docker-node1 labs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("$ docker "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" -it 0c4129204eec /bin/sh\n/ "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ip a")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(": lo: "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("LOOPBACK,UP,LOWER_UP"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" mtu "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("65536")]),s._v(" qdisc noqueue qlen "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v("\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1/8 scope "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("host")]),s._v(" lo\n       valid_lft forever preferred_lft forever\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(": eth0@if6: "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" mtu "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1500")]),s._v(" qdisc noqueue\n    link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff\n    inet "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("172.17")]),s._v(".0.2/16 brd "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("172.17")]),s._v(".255.255 scope global eth0\n       valid_lft forever preferred_lft forever\n/ "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看这个contaienr的ip地址，可以看到它被分配了一个172.17.0.2的ip地址。")]),s._v("\n")])])]),a("p",[s._v("同理，如果我们再用第一个命令，再创建一个container “test2”。docker也会创建一个network namespace。且这两个namespace可以相互连接。")]),s._v(" "),a("p",[s._v("那它底层的原理究竟是什么呢？我们先来做个试验：")]),s._v(" "),a("h4",{attrs:{id:"linux-network-namespace"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#linux-network-namespace"}},[s._v("#")]),s._v(" Linux Network Namespace")]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# 1首先，使用linux的ip netns命令创建两个netns "test1"和"test2"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("vagrant@docker-node1 labs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" netns "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" test1\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("vagrant@docker-node1 labs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" netns "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" test2\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("vagrant@docker-node1 labs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" netns list\ntest2\ntest1\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 2分别查看test1和test2的netns")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("vagrant@docker-node1 ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" netns "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" test1 "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" a\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(": lo: "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("LOOPBACK"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" mtu "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("65536")]),s._v(" qdisc noop state DOWN group default qlen "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v("\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("vagrant@docker-node1 ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" netns "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" test2 "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" a\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(": lo: "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("LOOPBACK"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" mtu "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("65536")]),s._v(" qdisc noop state DOWN group default qlen "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v("\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 这个时候我们看到这两个netns的lo端口是down的，而且没有mac地址")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 3使用ip link命令将lo端口开启，但是lo的state还是unknow的")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("vagrant@docker-node1 ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" netns "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" test1 "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("link")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("set")]),s._v(" dev lo up\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("vagrant@docker-node1 ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" netns "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" test1 "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("link")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(": lo: "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("LOOPBACK,UP,LOWER_UP"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" mtu "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("65536")]),s._v(" qdisc noqueue state UNKNOWN mode DEFAULT group default qlen "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v("\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 4 使用veth pair将两个netns连接起来")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("vagrant@docker-node1 ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("link")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" veth-test1 "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("type")]),s._v(" veth peer name veth-test2 "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 创建veth peer对")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(": veth-test2@veth-test1: "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("BROADCAST,MULTICAST,M-DOWN"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" mtu "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1500")]),s._v(" qdisc noop state DOWN mode DEFAULT group default qlen "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v("\n    link/ether 3a:21:3b:9d:43:4e brd ff:ff:ff:ff:ff:ff\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(": veth-test1@veth-test2: "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("BROADCAST,MULTICAST,M-DOWN"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" mtu "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1500")]),s._v(" qdisc noop state DOWN mode DEFAULT group default qlen "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v("\n    link/ether "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("56")]),s._v(":a8:37:0c:12:34 brd ff:ff:ff:ff:ff:ff\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("vagrant@docker-node1 ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("link")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("set")]),s._v(" veth-test1 netns test1 "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 将veth-test1添加到test1的netns中去")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("vagrant@docker-node1 ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("link")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("set")]),s._v(" veth-test2 netns test2 "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 将veth-test2添加到test2的netns中去")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("vagrant@docker-node1 ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" netns "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" test1 "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" addr "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".5.1/24 dev veth-test1\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 为veth-test1添加ip地址")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("vagrant@docker-node1 ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" netns "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" test2 "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" addr "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".5.2/24 dev veth-test2\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 为veth-test2添加ip地址")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("vagrant@docker-node1 ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" netns "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" test1 "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("link")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("set")]),s._v(" dev veth-test1 up "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 将veth-test1端口启动起来")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("vagrant@docker-node1 ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" netns "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" test2 "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("link")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("set")]),s._v(" dev veth-test2 up "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 将veth-test2端口启动起来")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 至此，两个netns就可以相互通信了")]),s._v("\n")])])]),a("img",{attrs:{src:"http://ww1.sinaimg.cn/large/006tNc79ly1g3s9ttixmdj31jc0u07bf.jpg",width:"500"}}),s._v(" "),a("p",[s._v("以上，docker的namespace的原理和linux的网络原理类似；")]),s._v(" "),a("h4",{attrs:{id:"两个容器是如何连接的？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#两个容器是如何连接的？"}},[s._v("#")]),s._v(" 两个容器是如何连接的？")]),s._v(" "),a("p",[s._v("先看下本地的docker的network")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("[vagrant@docker-node1 ~]$ docker network ls\nNETWORK ID          NAME                DRIVER              SCOPE\na1010ce919fe        bridge              bridge              local\nb37c3a6633c5        host                host                local\nc915a3cf2c83        none                null                local\n")])])]),a("p",[s._v("我们看到一个bridge类型的网络, 通过insepct命令查看这个bridge网络")]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("vagrant@docker-node1 ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("$ docker network inspect a1010ce919fe\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Containers"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"fb1fd0092971f06c794ac00b3c76aa847f5d3a04ce06121df5bdecfbf94daa05"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Name"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"test2"')]),s._v(",\n                "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"EndpointID"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ed20c7186ee7ea73285dbffdbf10e4d4d161773fff1c29eac621b14703f98379"')]),s._v(",\n                "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"MacAddress"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"02:42:ac:11:00:02"')]),s._v(",\n                "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"IPv4Address"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"172.17.0.2/16"')]),s._v(",\n                "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"IPv6Address"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n")])])]),a("p",[s._v("思考一个问题：test2的contaienr想要连接到主机上，需要怎么去建立连接？")]),s._v(" "),a("p",[s._v("那根据前面linux的network namespace知识我们了解到，需要test2 contaienr的namespace中有一个veth连接到主机的namespace上。")]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 先查看test2这个容器上的ip address")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("vagrant@docker-node1 ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("$ docker "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" -it test2 "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" a\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(": lo: "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("LOOPBACK,UP,LOWER_UP"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" mtu "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("65536")]),s._v(" qdisc noqueue qlen "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v("\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1/8 scope "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("host")]),s._v(" lo\n       valid_lft forever preferred_lft forever\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v(": eth0@if8: "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" mtu "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1500")]),s._v(" qdisc noqueue\n    link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff\n    inet "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("172.17")]),s._v(".0.2/16 brd "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("172.17")]),s._v(".255.255 scope global eth0\n       valid_lft forever preferred_lft forever\n  \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 再来看一下本机的ip address，可以看到有一个veth39e589a@if7的端口。它其实和test2的eth0端口是一对儿。")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v(": docker0: "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("BROADCAST,MULTICAST,UP,LOWER_UP"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" mtu "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1500")]),s._v(" qdisc noqueue state UP group default\n    link/ether 02:42:16:59:ba:ae brd ff:ff:ff:ff:ff:ff\n    inet "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("172.17")]),s._v(".0.1/16 brd "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("172.17")]),s._v(".255.255 scope global docker0\n       valid_lft forever preferred_lft forever\n    inet6 fe80::42:16ff:fe59:baae/64 scope "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("link")]),s._v("\n       valid_lft forever preferred_lft forever\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v(": veth39e589a@if7: "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("BROADCAST,MULTICAST,UP,LOWER_UP"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" mtu "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1500")]),s._v(" qdisc noqueue master docker0 state UP group default\n    link/ether da:9b:ea:44:9f:44 brd ff:ff:ff:ff:ff:ff link-netnsid "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n    inet6 fe80::d89b:eaff:fe44:9f44/64 scope "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("link")]),s._v("\n       valid_lft forever preferred_lft forever\n")])])]),a("p",[s._v("我们可以通过brctl这个命令来证明！veth39e589a是docker0的一个接口，就是用来将docker0和eth0连接起来；")]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("vagrant@docker-node1 ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("$ brctl show\nbridge name\tbridge "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("id")]),s._v("\t\tSTP enabled\tinterfaces\ndocker0\t\t"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8000")]),s._v(".02421659baae\tno\t\tveth39e589a\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 再添加一个container，经验证，证明的确是这样的一个关系；")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v(": veth39e589a@if7: "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("BROADCAST,MULTICAST,UP,LOWER_UP"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" mtu "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1500")]),s._v(" qdisc noqueue master docker0 state UP mode DEFAULT group default\n    link/ether da:9b:ea:44:9f:44 brd ff:ff:ff:ff:ff:ff link-netnsid "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v(": vethb2551a2@if11: "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("BROADCAST,MULTICAST,UP,LOWER_UP"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" mtu "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1500")]),s._v(" qdisc noqueue master docker0 state UP mode DEFAULT group default\n    link/ether b6:99:79:20:6a:89 brd ff:ff:ff:ff:ff:ff link-netnsid "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("vagrant@docker-node1 ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("$ brctl show\nbridge name\tbridge "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("id")]),s._v("\t\tSTP enabled\tinterfaces\ndocker0\t\t"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8000")]),s._v(".02421659baae\tno\t\tveth39e589a\n\t\t\t\t\t\t\t                    vethb2551a2\n")])])]),a("p",[s._v("网络拓扑图如下：")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2020-03-20-080921.jpg",alt:"image-20190607211943412"}})]),s._v(" "),a("h4",{attrs:{id:"单个容器怎么访问外网？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单个容器怎么访问外网？"}},[s._v("#")]),s._v(" 单个容器怎么访问外网？")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2020-03-20-080922.jpg",alt:"image-20190607212112356"}})]),s._v(" "),a("h4",{attrs:{id:"docker-network-link-作了解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-network-link-作了解"}},[s._v("#")]),s._v(" Docker Network Link (作了解)")]),s._v(" "),a("blockquote",[a("p",[s._v("在创建后台服务时，经常我们会碰到在代码里面配置服务器的ip地址，以实现后台服务器之间的相互通信。这个时候，一般我们事先并不知道ip地址是什么，但是我们可以通过用name的方式来连接。")])]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# docker run --link name")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("vagrant@docker-node1 ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("$ docker run -d --name test2 --link test1 busybox /bin/sh -c "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"while true; do sleep 3600; done"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#我们通过docker run --link的命令，创建了一个test2的容器，并且把test1 link到了test2上面，这样test2容器就可以通过test1这个名字来连通服务器了。")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("vagrant@docker-node1 ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("$ docker "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" -it test2 "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ping")]),s._v(" test1\nPING test1 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("172.17")]),s._v(".0.3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(": "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("56")]),s._v(" data bytes\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v(" bytes from "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("172.17")]),s._v(".0.3: "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("seq")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ttl")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("time")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.087")]),s._v(" ms\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v(" bytes from "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("172.17")]),s._v(".0.3: "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("seq")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ttl")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("time")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.083")]),s._v(" ms\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 注意，link是有方向性的，所以在test1的container中，是没办法用test2这个名字去ping通的")]),s._v("\n\n")])])]),a("h4",{attrs:{id:"docker-network-bridge"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-network-bridge"}},[s._v("#")]),s._v(" Docker Network Bridge")]),s._v(" "),a("blockquote",[a("p",[a("strong",[s._v("如何创建自己的network，并且将container指向这个network")])])]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 创建一个自己的bridge类型的network")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("vagrant@docker-node1 ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" docker network create my-bridge -d bridge \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看当前network")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("vagrant@docker-node1 ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("$ docker network "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 通过 --network参数，指定新建的container的network; -d参数表示后台执行")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("vagrant@docker-node1 ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("$ docker run -d --name test3 --network my-bridge busybox /bin/sh -c "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"while true; do sleep 3600; done"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看这个新的network，可以看到有一个test3的contaienr")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("vagrant@docker-node1 ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("$ docker network inspect 958b7afe0c77\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Containers"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a5469d704899c3ba4e514f9ecd742e1f5e118026ec90556606fe03e0e670a049"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Name"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"test3"')]),s._v(",\n                "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"EndpointID"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"e8fbbac97d36d7b27c97f5194e4a7b22eee85ab9c1c86629c6c1365f98d37e4a"')]),s._v(",\n                "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"MacAddress"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"02:42:ac:12:00:02"')]),s._v(",\n                "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"IPv4Address"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"172.18.0.2/16"')]),s._v(",\n                "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"IPv6Address"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(",\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 也可以看到这个network也有了一个新的interface")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("vagrant@docker-node1 ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("$ brctl show\nbridge name\tbridge "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("id")]),s._v("\t\tSTP enabled\tinterfaces\nbr-958b7afe0c77\t\t"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8000")]),s._v(".0242a5447697\tno\t\tvetha835200\n")])])]),a("blockquote",[a("p",[a("strong",[s._v("如何把之前的contaienr连接到新的network上？")])])]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("vagrant@docker-node1 ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("$ docker network connect my-bridge test1 "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 通过network connect命令将test1连接到my-bridge网络上")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("vagrant@docker-node1 ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("$ docker "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" -it test1 "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# test1就有了两个端口")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(": lo: "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("LOOPBACK,UP,LOWER_UP"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" mtu "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("65536")]),s._v(" qdisc noqueue qlen "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v("\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1/8 scope "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("host")]),s._v(" lo\n       valid_lft forever preferred_lft forever\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("11")]),s._v(": eth0@if12: "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" mtu "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1500")]),s._v(" qdisc noqueue\n    link/ether 02:42:ac:11:00:03 brd ff:ff:ff:ff:ff:ff\n    inet "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("172.17")]),s._v(".0.3/16 brd "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("172.17")]),s._v(".255.255 scope global eth0\n       valid_lft forever preferred_lft forever\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v(": eth1@if21: "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" mtu "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1500")]),s._v(" qdisc noqueue\n    link/ether 02:42:ac:12:00:04 brd ff:ff:ff:ff:ff:ff\n    inet "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("172.18")]),s._v(".0.4/16 brd "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("172.18")]),s._v(".255.255 scope global eth1\n       valid_lft forever preferred_lft forever\n       \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 很神奇的，如果两个contaienr是在同一个bridge里，那么这两个contaienr是会自动link上。也就是可以相互通过name来找到对方")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("vagrant@docker-node1 ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("$ docker "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" -it test1 "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ping")]),s._v(" test2\nPING test2 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("172.18")]),s._v(".0.3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(": "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("56")]),s._v(" data bytes\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v(" bytes from "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("172.18")]),s._v(".0.3: "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("seq")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ttl")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("time")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.107")]),s._v(" ms\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v(" bytes from "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("172.18")]),s._v(".0.3: "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("seq")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ttl")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("time")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.084")]),s._v(" ms\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("vagrant@docker-node1 ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("$ docker "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" -it test2 "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ping")]),s._v(" test1\nPING test1 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("172.17")]),s._v(".0.3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(": "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("56")]),s._v(" data bytes\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v(" bytes from "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("172.17")]),s._v(".0.3: "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("seq")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ttl")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("time")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.076")]),s._v(" ms\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v(" bytes from "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("172.17")]),s._v(".0.3: "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("seq")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ttl")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("time")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.106")]),s._v(" ms\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("vagrant@docker-node1 ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("$ docker "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" -it test2 "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ping")]),s._v(" test3\nPING test3 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("172.18")]),s._v(".0.2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(": "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("56")]),s._v(" data bytes\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v(" bytes from "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("172.18")]),s._v(".0.2: "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("seq")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ttl")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("time")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.081")]),s._v(" ms\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v(" bytes from "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("172.18")]),s._v(".0.2: "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("seq")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ttl")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("time")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.128")]),s._v(" ms\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v(" bytes from "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("172.18")]),s._v(".0.2: "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("seq")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ttl")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("time")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.088")]),s._v(" ms\n\n")])])]),a("h4",{attrs:{id:"如何把docker-container的端口映射到本地？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何把docker-container的端口映射到本地？"}},[s._v("#")]),s._v(" 如何把docker container的端口映射到本地？")]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("vagrant@docker-node1 ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("$ docker run --name nginx -d -p "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v(":80 nginx "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#将container的80端口映射到本地的80端口")]),s._v("\n")])])]),a("p",[a("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2020-03-20-080917.jpg",alt:"image-20190609210453382"}})]),s._v(" "),a("h4",{attrs:{id:"docker-host-network"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-host-network"}},[s._v("#")]),s._v(" Docker Host Network")]),s._v(" "),a("p",[s._v("没有自己独立的netns，只能共享host的。")]),s._v(" "),a("h4",{attrs:{id:"docker-none-network"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-none-network"}},[s._v("#")]),s._v(" Docker None Network")]),s._v(" "),a("p",[s._v("任何人都无法访问到这个网络")]),s._v(" "),a("h3",{attrs:{id:"docker部署多容器复杂应用程序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker部署多容器复杂应用程序"}},[s._v("#")]),s._v(" Docker部署多容器复杂应用程序")]),s._v(" "),a("p",[s._v("网络结构：")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2020-03-20-80919.jpg",alt:"image-20190614214232085"}})]),s._v(" "),a("h4",{attrs:{id:"_1-分组件去部署"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-分组件去部署"}},[s._v("#")]),s._v(" 1. 分组件去部署")]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("vagrant@docker-node1 flask-redis"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("$ docker run -d --name redis redis\n")])])]),a("h4",{attrs:{id:"_2-设置link、映射端口、设置环境变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-设置link、映射端口、设置环境变量"}},[s._v("#")]),s._v(" 2. 设置link、映射端口、设置环境变量")]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -e 可以设置docker contaienr的环境变量")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("vagrant@docker-node1 flask-redis"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("$ docker run -d --link redis --name flask-redis -p "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5000")]),s._v(":5000 -e "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("REDIS_HOST")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("redis coda/flask-redis\n")])])]),a("h4",{attrs:{id:"_3-多机器通信"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-多机器通信"}},[s._v("#")]),s._v(" 3. 多机器通信")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2020-03-20-080920.jpg",alt:"image-20190614214111867"}})]),s._v(" "),a("p",[s._v("通信方案：两个服务本身是无法通信的。需要通过vxlan的方式来进行通信。将两个服务的通信包封装到各自eth0的通信包上，通信过程中进行解包，来实现通信。下图是通信包的格式：下面是underlay，上层是overlay。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2020-03-20-080918.jpg",alt:"image-20190615062812381"}})]),s._v(" "),a("p",[s._v("依赖分布式存储：etcd")]),s._v(" "),a("p",[a("strong",[s._v("在两台机器上建立etcd的服务")])]),s._v(" "),a("p",[s._v("在docker-node1上")]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("vagrant@docker-node1:~$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" yum "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("wget")]),s._v("\nvagrant@docker-node1:~$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("wget")]),s._v(" https://github.com/coreos/etcd/releases/download/v3.0.12/etcd-v3.0.12-linux-amd64.tar.gz\nvagrant@docker-node1:~$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("tar")]),s._v(" zxvf etcd-v3.0.12-linux-amd64.tar.gz\nvagrant@docker-node1:~$ "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" etcd-v3.0.12-linux-amd64\nvagrant@docker-node1:~$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("nohup")]),s._v(" ./etcd --name docker-node1 --initial-advertise-peer-urls http://192.168.205.10:2380 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n--listen-peer-urls http://192.168.205.10:2380 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n--listen-client-urls http://192.168.205.10:2379,http://127.0.0.1:2379 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n--advertise-client-urls http://192.168.205.10:2379 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n--initial-cluster-token etcd-cluster "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n--initial-cluster docker-node1"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("http://192.168.205.10:2380,docker-node2"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("http://192.168.205.11:2380 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n--initial-cluster-state new"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("\n")])])]),a("p",[s._v("在docker-node2上")]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("vagrant@docker-node1:~$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" yum "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("wget")]),s._v("\nvagrant@docker-node2:~$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("wget")]),s._v(" https://github.com/coreos/etcd/releases/download/v3.0.12/etcd-v3.0.12-linux-amd64.tar.gz\nvagrant@docker-node2:~$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("tar")]),s._v(" zxvf etcd-v3.0.12-linux-amd64.tar.gz\nvagrant@docker-node2:~$ "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" etcd-v3.0.12-linux-amd64/\nvagrant@docker-node2:~$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("nohup")]),s._v(" ./etcd --name docker-node2 --initial-advertise-peer-urls http://192.168.205.11:2380 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n--listen-peer-urls http://192.168.205.11:2380 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n--listen-client-urls http://192.168.205.11:2379,http://127.0.0.1:2379 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n--advertise-client-urls http://192.168.205.11:2379 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n--initial-cluster-token etcd-cluster "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n--initial-cluster docker-node1"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("http://192.168.205.10:2380,docker-node2"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("http://192.168.205.11:2380 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n--initial-cluster-state new"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("\n")])])]),a("p",[s._v("检查cluster状态")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("vagrant@docker-node2:~/etcd-v3.0.12-linux-amd64$ ./etcdctl cluster-health\nmember 21eca106efe4caee is healthy: got healthy result from http://192.168.205.10:2379\nmember 8614974c83d1cc6d is healthy: got healthy result from http://192.168.205.11:2379\ncluster is healthy\n")])])]),a("p",[s._v("重启docker服务")]),s._v(" "),a("p",[s._v("创建overlay的网络")]),s._v(" "),a("h2",{attrs:{id:"docker持久化数据共享"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker持久化数据共享"}},[s._v("#")]),s._v(" Docker持久化数据共享")]),s._v(" "),a("p",[s._v("https://www.cnblogs.com/edisonchou/p/docker_volumes_introduction.html")]),s._v(" "),a("h3",{attrs:{id:"需求场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#需求场景"}},[s._v("#")]),s._v(" 需求场景")]),s._v(" "),a("p",[s._v("传统的container删除后，数据文件也会被删除。")]),s._v(" "),a("p",[s._v("但是对于类似数据之类的container，我们希望数据库的数据能被保存下来。")]),s._v(" "),a("h3",{attrs:{id:"docker持久化原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker持久化原理"}},[s._v("#")]),s._v(" Docker持久化原理")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2020-03-21-100848.jpg",alt:"image-20190614220107727"}})]),s._v(" "),a("h4",{attrs:{id:"持久化方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#持久化方案"}},[s._v("#")]),s._v(" 持久化方案")]),s._v(" "),a("p",[s._v("docker持久化两种方案，要么将文件存在host主机指定的目录上（bind mount）")]),s._v(" "),a("p",[s._v("要么用docker自己管理的volume（/var/lib/docker/volumes）。")]),s._v(" "),a("ul",[a("li",[s._v("本地的volume。 通过-v参数来实现，将本机host的目录作为数据存储卷。")]),s._v(" "),a("li",[s._v("基于plugin的volume。支持第三方存储，比如NAS, aws；")])]),s._v(" "),a("p",[a("strong",[s._v("volume类型")])]),s._v(" "),a("ul",[a("li",[a("p",[s._v("受管理的data volume。由docker后台自动创建，名字位置都是docker自动创建的。")])]),s._v(" "),a("li",[a("p",[s._v("绑定挂载的volume，通过用户指定具体的位置。")])])]),s._v(" "),a("h3",{attrs:{id:"data-volume-数据卷"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#data-volume-数据卷"}},[s._v("#")]),s._v(" Data Volume(数据卷)")]),s._v(" "),a("p",[s._v("简单创建一个数据库containner")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("docker run -d --name mysql1 -e -e "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("MYSQL_ALLOW_EMPTY_PASSWORD")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("true mysql\n")])])]),a("p",[s._v("docker会自动创建一个volume")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("$ docker volume "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v("\nDRIVER              VOLUME NAME\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("local")]),s._v("               0aa048295f85925d893e7b3ecbf0e235db7b47a2fae70aa440bd812495c1eac1\n")])])]),a("p",[s._v("验证删除container后,volume还在")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("$ docker stop mysql1\nmysql1\n$ docker "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" mysql1\nmysql1\n$ docker volume "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v("\nDRIVER              VOLUME NAME\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("local")]),s._v("               0aa048295f85925d893e7b3ecbf0e235db7b47a2fae70aa440bd812495c1eac1\n")])])]),a("p",[s._v("上面的volume name是系统随机生成的，怎么指定一个volume？")]),s._v(" "),a("p",[s._v("查看官网mysql的dockerfile，发现里面用到的是"),a("code",[s._v("/var/lib/mysql")]),s._v("这个路径")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("$ docker run -d -v my-mysql:/var/lib/mysql --name mysql1 -e "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("MYSQL_ALLOW_EMPTY_PASSWORD")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("true mysql \n")])])]),a("p",[s._v("看一下docker volume")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("$ docker volume "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v("\nDRIVER              VOLUME NAME\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("local")]),s._v("               my-mysql\n")])])]),a("p",[s._v("查看这个volume的详细信息")]),s._v(" "),a("div",{staticClass:"language-dockerfile extra-class"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[s._v("$ docker volume inspect my"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("mysql\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"CreatedAt"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"2020-03-23T22:26:36Z"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Driver"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"local"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Labels"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" null"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Mountpoint"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/mnt/sda1/var/lib/docker/volumes/my-mysql/_data"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Name"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"my-mysql"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Options"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" null"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Scope"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"local"')]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),a("p",[s._v("下面去验证下，这个volume可以保存数据库的数据")]),s._v(" "),a("p",[s._v("先去这个container里创建一个数据库")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("$ docker "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" -it mysql1 /bin/bash\nroot@a022c358001e:/"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# mysql -uroot")]),s._v("\nmysql"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" show databases"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n+--------------------+\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" Database           "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n+--------------------+\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" information_schema "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" mysql              "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" performance_schema "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" sys                "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n+--------------------+\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" rows "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("set")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.01")]),s._v(" sec"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\nmysql"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" create database docker"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nQuery OK, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" row affected "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v(" sec"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\nmysql"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" show databases"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n+--------------------+\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" Database           "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n+--------------------+\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" docker             "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" information_schema "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" mysql              "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" performance_schema "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" sys                "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n+--------------------+\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" rows "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("set")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v(" sec"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n")])])]),a("p",[s._v("删除docker container，重新创建一个docker container，将volume指定为之前的my-mysql。")]),s._v(" "),a("p",[s._v("==注==：如果不指定 -v，docker会自动创建一个新的volume。")]),s._v(" "),a("p",[s._v("​\t   下面意思是：volume的用my-mysql。因为当前名字已经存在，所以直接使用。如果不存在，那么会创建一个volume，名字叫my-mysql。")]),s._v(" "),a("p",[s._v("​\t "),a("code",[s._v("/var/lib/mysql")]),s._v("是mysql容器的目录路径，这个是在Dockerfile就指定了的。如果传别的路径，相当于创建了2个volume。这个自定义的volume没任何意义。")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("$ docker run -d -v my-mysql:/var/lib/mysql --name mysql2 -e MYSQL_ALLOW_EMPTY_PASSWORD=true mysql \n")])])]),a("p",[s._v("查看volume")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("$ docker volume ls\nDRIVER              VOLUME NAME\nlocal               my-mysql\n")])])]),a("p",[s._v("可以看到，还是只有1个volume")]),s._v(" "),a("p",[s._v("进入container内部")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("$ docker "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" -it mysql2 /bin/bash\nroot@2c1ec424075f:/"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# mysql -uroot")]),s._v("\nmysql"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" show databases"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n+--------------------+\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" Database           "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n+--------------------+\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" docker             "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" information_schema "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" mysql              "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" performance_schema "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" sys                "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n+--------------------+\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" rows "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("set")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v(" sec"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),a("p",[s._v("数据库数量和mysql1的一样。")]),s._v(" "),a("p",[a("strong",[s._v("总结一下")])]),s._v(" "),a("p",[s._v("docker volume会在host上的一个目录上 做一个软连接，指向cotainer上的一个目录。这两个目录上做修改文件可以相互感知。")]),s._v(" "),a("p",[s._v("==volume一般在host机器上的指定目录里：/var/lib/docker/volumes==，我这里路径因为是装了虚拟机，所以前面有一些不一样。"),a("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2020-03-23-224605.png",alt:"image-20200324064605274"}})]),s._v(" "),a("p",[s._v("在containenr里可以看到volume的目录内容，和host里的目录是一致的。这里路径就是我们上面说的mysql的volume"),a("code",[s._v("/var/lib/mysql")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2020-03-23-224647.png",alt:"image-20200324064646552"}})]),s._v(" "),a("h3",{attrs:{id:"bind-mounts"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bind-mounts"}},[s._v("#")]),s._v(" Bind Mounts")]),s._v(" "),a("p",[s._v("Data Volume的host目录是由docker自动创建并管理的，都在"),a("code",[s._v("/var/lib/docker/volumes")]),s._v("目录下")]),s._v(" "),a("p",[s._v("那怎么去指定一个自定义的目录呢？")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("docker run -d -it --name=edc-nginx -v /app/wwwroot:/usr/share/nginx/html nginx\n")])])]),a("p",[s._v("这里指定了将宿主机上的 /app/wwwroot 目录（如果没有会自动创建）挂载到 /usr/share/nginx/html （这个目录是nginx container的目录）")]),s._v(" "),a("p",[s._v("这里host机器==目录路径必须为全路径==(准确的说需要以"),a("code",[s._v("/")]),s._v("或"),a("code",[s._v("~/")]),s._v("开始的路径)，不然docker会将其当做volume name，而不是bind mounst处理。")]),s._v(" "),a("h4",{attrs:{id:"nginx-demo"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nginx-demo"}},[s._v("#")]),s._v(" nginx demo")]),s._v(" "),a("p",[s._v("沿用之前的Demo，做一些改造。")]),s._v(" "),a("p",[s._v("目录结构：")]),s._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2020-03-23-232423.png",alt:"image-20200324072422444"}}),s._v(" "),a("p",[s._v("static.conf是nginx的配置文件，内容如下：")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("server "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\tlisten "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8080")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n\tserver_name localhost"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    root /home/docker/static-htmls"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    location / "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        try_files "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$uri")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$uri")]),s._v("/ @router"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n        index  index.html index.htm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    location @router "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        rewrite ^.*$ /index.html last"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("p",[s._v("修改Dockerfile:")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("FROM nginx\nCOPY static-htmls/* /home/docker/static-htmls/\ncopy static.conf /etc/nginx/conf.d\nexpose "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8080")]),s._v("\n")])])]),a("p",[s._v("Build Image")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("docker build -t nginx-mount "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\n")])])]),a("p",[s._v("创建容器，指明挂载目录。")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("docker run -d -v "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("pwd")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v(":/home/docker -p "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7777")]),s._v(":8080 nginx-mount\n")])])]),a("p",[s._v("这里我把我的目录挂载到/home/docker目录下，和nginx里读取的目录一致。")]),s._v(" "),a("p",[s._v("这样，当我在本地修改代码时，容器里的文件就一起被修改了。")]),s._v(" "),a("p",[s._v("演示就省略了。")])])}),[],!1,null,null,null);t.default=n.exports}}]);