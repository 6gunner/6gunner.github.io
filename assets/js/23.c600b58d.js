(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{384:function(t,a,e){"use strict";e.r(a);var r=e(25),s=Object(r.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"wechat-payment-h5加载优化简介"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#wechat-payment-h5加载优化简介"}},[t._v("#")]),t._v(" WeChat Payment H5加载优化简介")]),t._v(" "),e("h2",{attrs:{id:"wechat-payment模块介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#wechat-payment模块介绍"}},[t._v("#")]),t._v(" WeChat Payment模块介绍")]),t._v(" "),e("p",[t._v("WeChat Payment设计了以下模块：")]),t._v(" "),e("ol",[e("li",[t._v("首页九宫格")]),t._v(" "),e("li",[t._v("银行卡模块（卡列表、绑卡功能）")]),t._v(" "),e("li",[t._v("支付模块 （拉起支付页）")]),t._v(" "),e("li",[t._v("密码模块 （设置、验证、重设密码）")]),t._v(" "),e("li",[t._v("交易模块 (交易历史、详情)")])]),t._v(" "),e("p",[t._v("模块间相互调用的情况较多，各模块均依赖于requre/zepto/underscore/backbone等基础库。最初设计为各模块各自分开，模块内部使用spa方式切换页面，引用相同的基础库文件，各自实现自身功能。由于缓存，内容最大的基础库加载应该不会很慢。")]),t._v(" "),e("h2",{attrs:{id:"体验优化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#体验优化"}},[t._v("#")]),t._v(" 体验优化")]),t._v(" "),e("p",[t._v("这种SPA与页面跳混用的方式并不成功，在页面跳转时能感觉明显的卡顿，体验并不如意。于是我们花了较大力气把各模块整合成一个SPA，加入JS预加载，切换页面卡顿的问题解决了。")]),t._v(" "),e("p",[t._v("有了SPA的基础，于是就有条件加入仿原生的页面切换动画了。于是在backbone router切换页面时加入了动画，并解决了判断后退的问题。")]),t._v(" "),e("p",[t._v("所有弹框都整改成组件，然后在组件上加入了弹框动画。")]),t._v(" "),e("p",[t._v("所有JS预先加载， H5内部切换页面再也不会卡顿了。")]),t._v(" "),e("h2",{attrs:{id:"加载优化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#加载优化"}},[t._v("#")]),t._v(" 加载优化")]),t._v(" "),e("p",[t._v("因为使用了requireJS, 于是很自然地使用了r.js做为代码优化工具，合并压缩js/css。但也走了一些弯路。")]),t._v(" "),e("p",[t._v("考虑到手机一般有4-6个并行连接来加载网页资源，于是将CDN资源合并目标设定为4个，在chrome模拟测试中确实效果不错。但实际测试这样做反而拖慢了速度。最终合并了所有能够合并的CDN文件， 速度反而更快。")])])}),[],!1,null,null,null);a.default=s.exports}}]);