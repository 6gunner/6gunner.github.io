(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{373:function(t,a,e){"use strict";e.r(a);var s=e(25),n=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"编译工具"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#编译工具"}},[t._v("#")]),t._v(" 编译工具")]),t._v(" "),e("h2",{attrs:{id:"快捷方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#快捷方式"}},[t._v("#")]),t._v(" 快捷方式")]),t._v(" "),e("div",{staticClass:"language-markdown extra-class"},[e("pre",{pre:!0,attrs:{class:"language-markdown"}},[e("code",[t._v("command + A 代码全选；\ncontrol + I 代码排版；\n")])])]),e("h2",{attrs:{id:"pod镜像设置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pod镜像设置"}},[t._v("#")]),t._v(" POD镜像设置")]),t._v(" "),e("p",[t._v("新版的 CocoaPods 不允许用pod repo add直接添加master库了，需要进入目录操作：")]),t._v(" "),e("div",{staticClass:"language-ruby extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[t._v("cd "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cocoapods"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("repos \npod repo remove master\ngit clone https"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("mirrors"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tuna"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tsinghua"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("edu"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cn"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("git"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("CocoaPods")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Specs")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("git master\n")])])]),e("p",[t._v("最后进入自己的工程，在自己工程的podFile第一行加上：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("source 'https://mirrors.tuna.tsinghua.edu.cn/git/CocoaPods/Specs.git'\n")])])]),e("blockquote",[e("p",[t._v("重置为官方上游")])]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" ~/.cocoapods/repos\npod repo remove master\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone https://github.com/CocoaPods/Specs master\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 最后进入自己的工程，在自己工程的podFile第一行加上")]),t._v("\nsources "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'https://github.com/CocoaPods/Specs'")]),t._v("\n")])])]),e("h1",{attrs:{id:"发布app"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#发布app"}},[t._v("#")]),t._v(" 发布APP")]),t._v(" "),e("h2",{attrs:{id:"开发证书"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#开发证书"}},[t._v("#")]),t._v(" 开发证书")]),t._v(" "),e("h3",{attrs:{id:"证书类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#证书类型"}},[t._v("#")]),t._v(" 证书类型")]),t._v(" "),e("blockquote",[e("p",[t._v("开发证书")])]),t._v(" "),e("p",[t._v("用于在设备上运行 app 以及使用 app 功能。")]),t._v(" "),e("p",[t._v("开发证书属于个人,在开发者帐户中，电脑名称会追加到开发证书名称后面 (例如，"),e("code",[t._v("Gita Kumar (Work Mac)")]),t._v("，其中 "),e("code",[t._v("Work Mac")]),t._v(" 是电脑名称)，便于识别证书。")]),t._v(" "),e("blockquote",[e("p",[t._v("分发证书")])]),t._v(" "),e("p",[t._v("用于分发 app 以进行测试和上传到 "),e("a",{attrs:{href:"https://help.apple.com/developer-account/#/dev6e1771f2c",target:"_blank",rel:"noopener noreferrer"}},[t._v("App Store Connect"),e("OutboundLink")],1),t._v("。一个机构账户能创建2个。")]),t._v(" "),e("p",[t._v("分发证书属于团队，每个团队只能拥有一种类型的分发证书 ("),e("a",{attrs:{href:"https://help.apple.com/developer-account/#/dev84de6b2b4",target:"_blank",rel:"noopener noreferrer"}},[t._v("Developer ID"),e("OutboundLink")],1),t._v(" 证书除外)。只有"),e("a",{attrs:{href:"https://help.apple.com/developer-account/#/devb9535fd68",target:"_blank",rel:"noopener noreferrer"}},[t._v("帐户持有人"),e("OutboundLink")],1),t._v("或"),e("a",{attrs:{href:"https://help.apple.com/developer-account/#/deva73372ae0",target:"_blank",rel:"noopener noreferrer"}},[t._v("管理"),e("OutboundLink")],1),t._v("角色可以创建分发证书。")]),t._v(" "),e("blockquote",[e("p",[t._v("创建一个证书")])]),t._v(" "),e("p",[e("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2020-02-22-094008.png",alt:"image-20200222174007618"}})]),t._v(" "),e("p",[e("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2020-02-22-095621.png",alt:"image-20200222175621391"}})]),t._v(" "),e("h2",{attrs:{id:"发布到fir"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#发布到fir"}},[t._v("#")]),t._v(" 发布到fir")]),t._v(" "),e("blockquote",[e("p",[t._v("参考文章：https://fir.im/support/articles/app_publish/how-to-build-adhoc-ipa")])]),t._v(" "),e("p",[t._v("1.添加证书")]),t._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2020-02-22-100002.png",alt:"image-20200222180001298"}}),t._v(" "),e("p",[t._v("2.选择iOS Distribution")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2020-02-22-101216.png",alt:"image-20200222181215956"}})]),t._v(" "),e("p",[t._v("3.上传本地秘钥")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2020-02-22-101229.png",alt:"image-20200222181229494"}})]),t._v(" "),e("p",[t._v("4.下载证书 & 配置profile")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2020-02-22-101417.png",alt:"image-20200222181417366"}})]),t._v(" "),e("p",[e("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2020-02-22-101545.png",alt:"image-20200222181545272"}})]),t._v(" "),e("p",[t._v("5.选择bundler appid")]),t._v(" "),e("p",[t._v("这里面我选择的"),e("code",[t._v("XC Wildcard(R8WQ7RD5NR.*)")]),t._v(" 忘了截图了")]),t._v(" "),e("p",[t._v("6.选择证书 生成profile")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2020-02-22-101656.png",alt:"image-20200222181656512"}})]),t._v(" "),e("p",[e("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2020-02-22-101754.png",alt:"image-20200222181754122"}})]),t._v(" "),e("p",[e("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2020-02-22-101809.png",alt:"image-20200222181808852"}})]),t._v(" "),e("p",[t._v("7.下载profile 然后配置到xcode里")]),t._v(" "),e("p",[t._v("8.配置"),e("code",[t._v("code sign identity")])]),t._v(" "),e("h2",{attrs:{id:"上架到appstore"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#上架到appstore"}},[t._v("#")]),t._v(" 上架到APPStore")]),t._v(" "),e("blockquote",[e("p",[t._v("之前的笔记：https://note.youdao.com/ynoteshare1/index.html?id=41b0ebcb8c73d7b5b7c45fac65a6193e&type=note")])]),t._v(" "),e("h1",{attrs:{id:"从零开始"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#从零开始"}},[t._v("#")]),t._v(" 从零开始")]),t._v(" "),e("h2",{attrs:{id:"基本语法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基本语法"}},[t._v("#")]),t._v(" 基本语法")]),t._v(" "),e("p",[t._v("https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/DefiningClasses/DefiningClasses.html")]),t._v(" "),e("p",[t._v("http://cocoadevcentral.com/d/learn_objectivec/")]),t._v(" "),e("h3",{attrs:{id:"文件扩展"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#文件扩展"}},[t._v("#")]),t._v(" 文件扩展")]),t._v(" "),e("img",{staticStyle:{zoom:"33%"},attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2020-02-21-142523.jpg",alt:"image-20190618220154265"}}),t._v(" "),e("h3",{attrs:{id:"调用方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#调用方法"}},[t._v("#")]),t._v(" 调用方法")]),t._v(" "),e("div",{staticClass:"language-objective-c extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('// 普通调用方法\n[object method];\n// 带输入的方法\n[object methodWithInput:input]\n\n// 接收方法返回的对象\noutput = [object methodWithOutput];\noutput = [object methodWithInputAndOutput:input]\n  \n// 多参数方法\n// 方法定义 writeToFile:atomically方法里接收2个参数：path和useAuxiliaryFile\n-(BOOL)writeToFile:(NSString *)path atomically:(BOOL)useAuxiliaryFile;\n// 调用方法\nBOOL result = [myData writeToFile:@"/tmp/log.txt" atomically:NO];\n')])])]),e("p",[t._v("对于上面的多参数方法，实际上方法名叫："),e("code",[t._v("writeToFile:atomically:")])]),t._v(" "),e("h3",{attrs:{id:"存储器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#存储器"}},[t._v("#")]),t._v(" 存储器")]),t._v(" "),e("blockquote",[e("p",[t._v("1.x版本")])]),t._v(" "),e("p",[t._v("oc里所有实例的属性都默认私有。1.x版本里修改或者读取变量需要通过setter和getter方法(读取不用特意去加get前缀，比如上面代码里的"),e("code",[t._v("[photo caption]")])]),t._v(" "),e("div",{staticClass:"language-objective-c extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('[photo setCaption:@"Day at the Beach"];\ncaption = [photo caption];\n')])])]),e("blockquote",[e("p",[t._v("2.x版本")])]),t._v(" "),e("p",[t._v("直接使用"),e("code",[t._v(".")]),t._v("语法")]),t._v(" "),e("div",{staticClass:"language-objc extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('photo.caption = @"Day at the Beach";\noutput = photo.caption;\n')])])]),e("h3",{attrs:{id:"创建对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建对象"}},[t._v("#")]),t._v(" 创建对象")]),t._v(" "),e("blockquote",[e("p",[t._v("自动释放内存")])]),t._v(" "),e("div",{staticClass:"language-objc extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("NSString* string1 = [NSString string];\n")])])]),e("blockquote",[e("p",[t._v("手动释放内存")])]),t._v(" "),e("div",{staticClass:"language-objc extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("NSString* string2 = [[NSString alloc] init];\n[string2 release];\n")])])]),e("blockquote",[e("p",[t._v("初始化方法")])]),t._v(" "),e("div",{staticClass:"language-objc extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('-(id)init{\n\tif (self = [super init]) {\n\t\t  [self setCaption:@"Default Caption"];\n      [self setPhotographer:@"Default Photographer"];\n\t}\n}\n')])])]),e("blockquote",[e("p",[t._v("对象回收")])]),t._v(" "),e("div",{staticClass:"language-objc extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("-(void) dealloc{\n  \t[caption release];\n    [photographer release];\n  \t// 调用父类的回收方法\n    [super dealloc];\n}\n")])])]),e("h3",{attrs:{id:"定义class-interface"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#定义class-interface"}},[t._v("#")]),t._v(" 定义Class Interface")]),t._v(" "),e("p",[t._v("oc里创建类需要分2步，第一步使用@interface来定义头文件("),e("code",[t._v(".h")]),t._v("后缀)；第二步实现这个头文件。")]),t._v(" "),e("div",{staticClass:"language-objc extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("#import <Foundation/Foundation.h>\n\n@interface XYZPerson : NSObject\n\n\t@property NSString* firstName;\n\t@property NSString* lastName;\n\t@property NSDate* birthDate;\n\n\t- (void)sayHello;\n\n@end\n")])])]),e("div",{staticClass:"language-objc extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('#import "XYZPerson.h"\n\n@implementation XYZPerson\n  \n  - (void)sayHello {\n      NSString* hello = [NSString stringWithFormat:@"Hello, %@ %@!",self.firstName, \t\t\tself.lastName];\n      NSLog (@"%@", hello);\n  }\n@end\n')])])]),e("h3",{attrs:{id:"property属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#property属性"}},[t._v("#")]),t._v(" property属性")]),t._v(" "),e("p",[t._v("oc里面的存储器可以用@property指令来代替。")]),t._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2020-02-24-233952.png",alt:"img"}}),t._v(" "),e("p",[t._v("attributes有三种类型：")]),t._v(" "),e("h4",{attrs:{id:"_1-atomicity-原子性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-atomicity-原子性"}},[t._v("#")]),t._v(" 1.Atomicity(原子性)")]),t._v(" "),e("p",[t._v("比较简单的一句话理解就是：是否给setter和getter加锁(是否保证setter或者getter的每次访问是完整性的)。")]),t._v(" "),e("p",[t._v("原子性，有atomic和nonatomic两个值可选。默认值是atomic(也就是不写的话，默认是atomic)。")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("atomic")]),t._v("(默认值)")])]),t._v(" "),e("p",[t._v("使用atomic，在一定程度上可以保证线程安全，「atomic的作用只是给getter和setter加了个锁」。也就是说，有线程在访问setter，其他线程只能等待完成后才能访问。")]),t._v(" "),e("p",[t._v("它能保证：即使多个线程「同时」访问这个变量，atomic会让你得到一个有意义的值(valid value)。但是不能保证你获得的是哪个值（有可能是被其他线程修改过的值，也有可能是没有修改过的值）。")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("nonatomic")])])]),t._v(" "),e("p",[t._v("而用nonatomic，则不保证你获得的是有效值，如果像上面所述，读、写两个线程同时访问变量，有可能会给出一个无意义的垃圾值。")]),t._v(" "),e("p",[t._v("这样对比，atomic并不能完全保证程序层面的线程安全，又有额外的性能耗费(要对getter和setter进行加锁操作);")]),t._v(" "),e("p",[t._v("所以，你会见到，几乎所有情况，我们都用nonatomic。")]),t._v(" "),e("h4",{attrs:{id:"_2-access-存取特性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-access-存取特性"}},[t._v("#")]),t._v(" 2.Access(存取特性)")]),t._v(" "),e("p",[t._v("存取特性有"),e("strong",[t._v("readwrite")]),t._v("(默认值)和"),e("strong",[t._v("readonly")]),t._v("。")]),t._v(" "),e("p",[t._v("这个从名字看就很容易理解，定义了这个属性是「只读」，还是「读写」皆可。")]),t._v(" "),e("p",[t._v("如果是"),e("strong",[t._v("readwrite")]),t._v("，就是告诉编译器，同时生成getter和setter。如果是"),e("strong",[t._v("readonly")]),t._v("，只生成getter。")]),t._v(" "),e("h4",{attrs:{id:"_3-storage-内存管理特性-管理对象的生命周期的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-storage-内存管理特性-管理对象的生命周期的"}},[t._v("#")]),t._v(" 3.Storage(内存管理特性)(管理对象的生命周期的)")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("strong")]),t._v(" (默认值)")])]),t._v(" "),e("p",[t._v("ARC新增的特性。")]),t._v(" "),e("p",[t._v("表明你需要引用(持有)这个对象(reference to the object)，负责保持这个对象的生命周期。")]),t._v(" "),e("p",[e("strong",[t._v("注意，基本数据类型(非对象类型,如int, float, BOOL)，默认值并不是strong，strong只能用于对象类型。")])]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("weak")])])]),t._v(" "),e("p",[t._v("ARC新增的特性。")]),t._v(" "),e("p",[t._v("也会给你一个引用(reference/pointer)，指向对象。但是不会主张所有权(claim ownership)。也不会增加retain count。")]),t._v(" "),e("p",[t._v("如果对象A被销毁，所有指向对象A的弱引用(weak reference)(用weak修饰的属性)，都会自动设置为nil。")]),t._v(" "),e("p",[t._v("在delegate patterns中常用weak解决strong reference cycles(以前叫retain cycles)问题。")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("copy")])])]),t._v(" "),e("p",[t._v("为了说明"),e("strong",[t._v("copy")]),t._v("，我们先举个栗子：")]),t._v(" "),e("p",[t._v("我在某个类(class1)中声明两个字符串属性，一个用copy，一个不用：")]),t._v(" "),e("div",{staticClass:"language-objectivec extra-class"},[e("pre",{pre:!0,attrs:{class:"language-objectivec"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@property")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("copy"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nonatomic"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" NSString "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("nameCopy"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 或者可以省略strong, 编译器默认取用strong")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@property")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("strong"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nonatomic"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" NSString "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("nameNonCopy"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("在另一个类中，用一个NSMutableString对这两个属性赋值并打印，再修改这个NSMutableString，再打印，看看会发生什么：")]),t._v(" "),e("div",{staticClass:"language-objectivec extra-class"},[e("pre",{pre:!0,attrs:{class:"language-objectivec"}},[e("code",[t._v("Class1 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("testClass1 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Class1 alloc"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" init"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nNSMutableString "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("nameString "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("NSMutableString stringWithFormat"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"Antony"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 用赋值NSMutableString给NSString赋值")]),t._v("\ntestClass1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nameCopy "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nameString"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ntestClass1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nameNonCopy "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nameString"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   \n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSLog")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"修改nameString前, nameCopy: %@; nameNonCopy: %@"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" testClass1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nameCopy"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" testClass1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nameNonCopy"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("nameString appendString"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('@".Wong"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   \n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSLog")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"修改nameString后, nameCopy: %@; nameNonCopy: %@"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" testClass1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nameCopy"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" testClass1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nameNonCopy"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("打印结果是：")]),t._v(" "),e("div",{staticClass:"language-css extra-class"},[e("pre",{pre:!0,attrs:{class:"language-css"}},[e("code",[t._v("修改nameString前"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v("nameCopy")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Antony"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v("nameNonCopy")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Antony\n修改nameString后"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v("nameCopy")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Antony"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v("nameNonCopy")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Antony.Wong\n")])])]),e("p",[t._v("我只是修改了"),e("code",[t._v("nameString")]),t._v("，为什么"),e("code",[t._v("testClass1.nameNonCopy")]),t._v("的值没改，它也跟着变了？")]),t._v(" "),e("p",[t._v("因为"),e("code",[t._v("strong")]),t._v("特性，对指向对象的指针进行引用计数加1，这时候，"),e("code",[t._v("nameString")]),t._v("和"),e("code",[t._v("testClass1.nameNonCopy")]),t._v("指向的其实是同一个对象(同一块内存)。"),e("code",[t._v("nameString")]),t._v("修改了值，自然影响到"),e("code",[t._v("testClass1.nameNonCopy")]),t._v("。")]),t._v(" "),e("p",[t._v("而"),e("code",[t._v("copy")]),t._v("这个特性，会在赋值前，复制一个对象，"),e("code",[t._v("testClass1.nameCopy")]),t._v("指向了一个新对象，这时候"),e("code",[t._v("nameString")]),t._v("怎么修改，也不关它啥事了。应用"),e("code",[t._v("copy")]),t._v("特性，系统应该是在setter中进行了如下操作：")]),t._v(" "),e("div",{staticClass:"language-objectivec extra-class"},[e("pre",{pre:!0,attrs:{class:"language-objectivec"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("setNameCopy"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSString "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("nameCopy "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    _nameCopy "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("nameCopy copy"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("大家了解"),e("code",[t._v("copy")]),t._v("的作用了吧，是为了防止属性被意外修改的。那什么时候要用到"),e("code",[t._v("copy")]),t._v("呢？")]),t._v(" "),e("p",[t._v("所有有mutable(可变)版本的属性类型，如NSString, NSArray, NSDictionary等等——他们都有可变的版本类型:NSMutableString, NSMutableArray, NSMutableDictionary。这些类型在属性赋值时，右边的值有可能是它们的可变版本。这样就会出现属性值被意外改变的可能。所以它们都应该用"),e("code",[t._v("copy")]),t._v("。")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("assign")])])]),t._v(" "),e("p",[t._v("是非ARC时代的特性，")]),t._v(" "),e("p",[t._v("它的作用和"),e("strong",[t._v("weak")]),t._v("类似，唯一区别是：如果对象A被销毁，所有指向这个对象A的"),e("strong",[t._v("assign")]),t._v("属性并不会自动设置为nil。这时候这些属性就变成野指针，再访问这些属性，程序就会crash。")]),t._v(" "),e("p",[t._v("因此，在ARC下，"),e("strong",[t._v("assign")]),t._v("就变成用于修饰基本数据类型(Primitive Type)，也就是非对象/非指针数据类型，如：int、BOOL、float等。")]),t._v(" "),e("p",[e("strong",[t._v("注意，在非ARC时代，还没有strong的时候。assign是默认值。ARC下，默认值变成strong了。这个要注意一下，否则会引起困扰。")])]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("retain")])])]),t._v(" "),e("p",[e("strong",[t._v("retain")]),t._v("是以前非ARC时代的特性，在ARC下并不常用。")]),t._v(" "),e("p",[t._v("它是"),e("strong",[t._v("strong")]),t._v("的同义词，两者功能一致。不知道为什么还保留着。")]),t._v(" "),e("div",{staticClass:"language-objc extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("@interface Photo: NSObject \n@property (retain) NSString* caption;\n@property (retain) NSString* photographer;\n@end \n")])])]),e("p",[t._v("括号里面的retain表示，setter方法应该保存输入值。")]),t._v(" "),e("div",{staticClass:"language-objc extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('#import "Photo.h"  \n@implementation Photo\n\n@synthesize caption;\n@synthesize photographer;\n// 需要手动释放内存\n- (void) dealloc\n{\n    [caption release];\n    [photographer release];\n    [super dealloc];\n}\n@end\n')])])]),e("h3",{attrs:{id:"调用nil对象方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#调用nil对象方法"}},[t._v("#")]),t._v(" 调用nil对象方法")]),t._v(" "),e("p",[t._v("oc里面nil表示空对象，但是调用nil对象的方法不会报错或者异常。")]),t._v(" "),e("div",{staticClass:"language-objc extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("- (void) dealloc\n{\n    self.caption = nil;\n    self.photographer = nil;\n    [super dealloc];\n}\n")])])]),e("h3",{attrs:{id:"categories"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#categories"}},[t._v("#")]),t._v(" Categories")]),t._v(" "),e("p",[t._v("categories是一个最有用的特色功能，他可以不用重新定义一个子类，就能重写一个类的方法（一般是增加方法）；")]),t._v(" "),e("div",{staticClass:"language-objc extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("#import <Cocoa/Cocoa.h>\n            \n@interface NSString (Utilities)\n- (BOOL) isURL;\n@end\n")])])]),e("div",{staticClass:"language-objc extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('#import "NSString-Utilities.h"\n            \n@implementation NSString (Utilities)\n\n- (BOOL) isURL\n{\n    if ( [self hasPrefix:@"http://"] )\n        return YES;\n    else\n        return NO;\n}\n\n@end\n')])])]),e("div",{staticClass:"language-objc extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('NSString* string1 = @"http://pixar.com/";\nNSString* string2 = @"Pixar";\n\nif ( [string1 isURL] )\n    NSLog (@"string1 is a URL");\n\nif ( [string2 isURL] )\n    NSLog (@"string2 is a URL");\n')])])]),e("h2",{attrs:{id:"构建应用界面"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#构建应用界面"}},[t._v("#")]),t._v(" 构建应用界面")]),t._v(" "),e("h3",{attrs:{id:"视图的生命周期"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#视图的生命周期"}},[t._v("#")]),t._v(" 视图的生命周期")]),t._v(" "),e("h3",{attrs:{id:"helloworld页面"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#helloworld页面"}},[t._v("#")]),t._v(" HelloWorld页面")]),t._v(" "),e("blockquote",[e("p",[t._v("通过xib创建")])]),t._v(" "),e("p",[t._v("AppDelegate.m代码")]),t._v(" "),e("div",{staticClass:"language-objc extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(' // 调用UIWindow的initWithFrame方法\n    // 参数是一个CGRect对象 通过[UIScreen mainScreen]对象的bounds方法获取获取\n    self.window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];\n    self.window.rootViewController = [[RootViewController alloc] initWithNibName:@"RootViewController" bundle:nil];\n    [self.window makeKeyAndVisible];\n    \n')])])]),e("blockquote",[e("p",[t._v("通过代码构建")])]),t._v(" "),e("p",[t._v("1.创建一个视图页面"),e("code",[t._v("CocoaTouchClass")])]),t._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2020-02-23-021512.png",alt:"image-20200223101512042"}}),t._v(" "),e("p",[t._v("2.在AppDelegate.m里引用controller")]),t._v(" "),e("div",{staticClass:"language-objc extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('#import "HelloWorldViewController.h"\n\n@interface AppDelegate ()\n\n@end\n\n@implementation AppDelegate\n\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    self.window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];\n    self.window.rootViewController = [[HelloWorldViewController alloc] init];\n    self.window.backgroundColor = [UIColor whiteColor];\n    [self.window makeKeyAndVisible];\n    return YES;\n}\n')])])]),e("h3",{attrs:{id:"frame和bounds的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#frame和bounds的区别"}},[t._v("#")]),t._v(" frame和bounds的区别")]),t._v(" "),e("p",[t._v("frame指的是相对于view的parent视图")]),t._v(" "),e("p",[t._v("bounds指的是相对于自身的视图；")]),t._v(" "),e("p",[t._v("所以bounds的位置是（0，0）")]),t._v(" "),e("div",{staticClass:"language-objc extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('- (void)viewDidLoad {\n    [super viewDidLoad];\n    CGRect rootScreen = [[UIScreen mainScreen] bounds];\n    UIView* viewA = [[UIView alloc] init];\n    viewA.backgroundColor = [UIColor grayColor];\n    viewA.frame = CGRectMake(0, 0, rootScreen.size.width, 500);\n    [self.view addSubview:viewA];\n    \n    UIView* viewB = [[UIView alloc] init];\n    viewB.backgroundColor = [UIColor whiteColor];\n    viewB.frame = CGRectMake(50, 100, 100, 200);\n    [viewA addSubview:viewB];\n    \n    NSLog(@"frame_x: %.2f, frame_y: %.2f", viewB.frame.origin.x, viewB.frame.origin.y);\n    \n    NSLog(@"frame_w: %.2f, frame_h: %.2f", viewB.frame.size.width, viewB.frame.size.height);\n    \n    NSLog(@"bounds_x: %.2f, bounds_y: %.2f", viewB.bounds.origin.x, viewB.bounds.origin.y);\n    \n    NSLog(@"bounds_w: %.2f, bounds_h: %.2f", viewB.bounds.size.width, viewB.bounds.size.height);\n\n}\n')])])]),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2020")]),t._v("-02-23 "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),t._v(":01:40.144806+0800 my-app"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("66443")]),t._v(":5710889"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" frame_x: "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("50.00")]),t._v(", frame_y: "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("100.00")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2020")]),t._v("-02-23 "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),t._v(":01:40.144934+0800 my-app"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("66443")]),t._v(":5710889"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" frame_w: "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("100.00")]),t._v(", frame_h: "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("200.00")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2020")]),t._v("-02-23 "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),t._v(":01:40.145047+0800 my-app"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("66443")]),t._v(":5710889"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" bounds_x: "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.00")]),t._v(", bounds_y: "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.00")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2020")]),t._v("-02-23 "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),t._v(":01:40.145134+0800 my-app"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("66443")]),t._v(":5710889"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" bounds_w: "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("100.00")]),t._v(", bounds_h: "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("200.00")]),t._v("\n")])])]),e("h3",{attrs:{id:"绑定事件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#绑定事件"}},[t._v("#")]),t._v(" 绑定事件")]),t._v(" "),e("h3",{attrs:{id:"控件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#控件"}},[t._v("#")]),t._v(" 控件")]),t._v(" "),e("h4",{attrs:{id:"uiswitch控件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#uiswitch控件"}},[t._v("#")]),t._v(" UISwitch控件")]),t._v(" "),e("p",[t._v("分段控制器")]),t._v(" "),e("h4",{attrs:{id:"uinavigationcontroller"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#uinavigationcontroller"}},[t._v("#")]),t._v(" UINavigationController")]),t._v(" "),e("h1",{attrs:{id:"框架"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#框架"}},[t._v("#")]),t._v(" 框架")]),t._v(" "),e("h2",{attrs:{id:"mvvm-vs-mvc"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mvvm-vs-mvc"}},[t._v("#")]),t._v(" MVVM vs MVC")]),t._v(" "),e("p",[t._v("一个典型的 iOS 是如何构建的，并从那里了解 MVVM：")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2020-02-25-082522.png",alt:"Typical Model-View-Controller setup"}})]),t._v(" "),e("p",[t._v("我们看到的是一个典型的 MVC 设置。Model 呈现数据，View 呈现用户界面，而 View Controller 调节它两者之间的交互。Cool！")]),t._v(" "),e("p",[t._v("稍微考虑一下，虽然 View 和 View Controller 是技术上不同的组件，但它们几乎总是手牵手在一起，成对的。你什么时候看到一个 View 能够与不同 View Controller 配对？或者反过来？所以，为什么不正规化它们的连接呢？")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2020-02-25-082551.png",alt:"Intermediate"}})]),t._v(" "),e("p",[t._v("这更准确地描述了你可能已经编写的 MVC 代码。但它并没有做太多事情来解决 iOS 应用中日益增长重量级视图控制器的问题。在典型的 MVC 应用里，"),e("em",[t._v("许多")]),t._v("逻辑被放在 View Controller 里。它们中的一些确实属于 View Controller，但更多的是所谓的“表示逻辑（presentation logic）”。")]),t._v(" "),e("ul",[e("li",[t._v("表示层逻辑：那些可以将Model转化为View需要呈现的样子的逻辑。例如将一个 "),e("code",[t._v("NSDate")]),t._v(" 转换为一个格式化过的 "),e("code",[t._v("NSString")]),t._v("。")])]),t._v(" "),e("p",[t._v("我们的图解里缺少某些东西，那些使我们可以把所有表示逻辑放进去的东西。我们打算将其称为 “View Model” —— 它位于 View/Controller 与 Model 之间：")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2020-02-25-082509.png",alt:"Model-View-ViewModel"}})]),t._v(" "),e("p",[t._v("看起好多了！这个图解准确地描述了什么是 MVVM：一个 MVC 的增强版，我们正式连接了视图和控制器，并将表示逻辑从 Controller 移出放到一个新的对象里，即 View Model。MVVM 听起来很复杂，但它本质上就是一个精心优化的 MVC 架构，而 MVC 你早已熟悉。")]),t._v(" "),e("p",[t._v("如我们之前所见，MVVM 基本上就是 MVC 的改进版，所以很容易就能看到它如何被整合到现有使用典型 MVC 架构的应用中。让我们看一个简单的 "),e("code",[t._v("Person")]),t._v(" Model 以及相应的 View Controller：")]),t._v(" "),e("div",{staticClass:"language-objc extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("@interface Person : NSObject\n\n- (instancetype)initwithSalutation:(NSString *)salutation firstName:(NSString *)firstName lastName:(NSString *)lastName birthdate:(NSDate *)birthdate;\n\n@property (nonatomic, readonly) NSString *salutation;\n@property (nonatomic, readonly) NSString *firstName;\n@property (nonatomic, readonly) NSString *lastName;\n@property (nonatomic, readonly) NSDate *birthdate;\n\n@end\n")])])]),e("p",[t._v("Cool！现在我们假设我们有一个 "),e("code",[t._v("PersonViewController")]),t._v(" ，在 "),e("code",[t._v("viewDidLoad")]),t._v(" 里，只需要基于它的 "),e("code",[t._v("model")]),t._v(" 属性设置一些 Label 即可。")]),t._v(" "),e("div",{staticClass:"language-objc extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('- (void)viewDidLoad {\n    [super viewDidLoad];\n\n    if (self.model.salutation.length > 0) {\n        self.nameLabel.text = [NSString stringWithFormat:@"%@ %@ %@", self.model.salutation, self.model.firstName, self.model.lastName];\n    } else {\n        self.nameLabel.text = [NSString stringWithFormat:@"%@ %@", self.model.firstName, self.model.lastName];\n    }\n\n    NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];\n    [dateFormatter setDateFormat:@"EEEE MMMM d, yyyy"];\n    self.birthdateLabel.text = [dateFormatter stringFromDate:model.birthdate];\n}\n')])])]),e("p",[t._v("这全都直截了当，标准的 MVC。现在来看看我们如何用一个 View Model 来增强它。")]),t._v(" "),e("div",{staticClass:"language-objc extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("@interface PersonViewModel : NSObject\n\n- (instancetype)initWithPerson:(Person *)person;\n\n@property (nonatomic, readonly) Person *person;\n\n@property (nonatomic, readonly) NSString *nameText;\n@property (nonatomic, readonly) NSString *birthdateText;\n\n@end\n")])])]),e("p",[t._v("我们的 View Model 的实现大概如下：")]),t._v(" "),e("div",{staticClass:"language-objc extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('@implementation PersonViewModel\n\n- (instancetype)initWithPerson:(Person *)person {\n    self = [super init];\n    if (!self) return nil;\n\n    _person = person;\n    if (person.salutation.length > 0) {\n        _nameText = [NSString stringWithFormat:@"%@ %@ %@", self.person.salutation, self.person.firstName, self.person.lastName];\n    } else {\n        _nameText = [NSString stringWithFormat:@"%@ %@", self.person.firstName, self.person.lastName];\n    }\n\n    NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];\n    [dateFormatter setDateFormat:@"EEEE MMMM d, yyyy"];\n    _birthdateText = [dateFormatter stringFromDate:person.birthdate];\n\n    return self;\n}\n\n@end\n')])])]),e("p",[t._v("Cool！我们已经将 "),e("code",[t._v("viewDidLoad")]),t._v(" 中的表示逻辑放入我们的 View Model 里了。此时，我们新的 "),e("code",[t._v("viewDidLoad")]),t._v(" 就会非常轻量：")]),t._v(" "),e("div",{staticClass:"language-objc extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("- (void)viewDidLoad {\n    [super viewDidLoad];\n\n    self.nameLabel.text = self.viewModel.nameText;\n    self.birthdateLabel.text = self.viewModel.birthdateText;\n}\n")])])]),e("p",[t._v("所以，如你所见，并没有对我们的 MVC 架构做太多改变。还是同样的代码，只不过移动了位置。")]),t._v(" "),e("h2",{attrs:{id:"mjrefresh"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mjrefresh"}},[t._v("#")]),t._v(" MJRefresh")]),t._v(" "),e("blockquote",[e("p",[t._v("https://github.com/CoderMJLee/MJRefresh")])]),t._v(" "),e("p",[t._v("ios下拉刷新组件")]),t._v(" "),e("h3",{attrs:{id:"基本用法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基本用法"}},[t._v("#")]),t._v(" 基本用法")]),t._v(" "),e("p",[t._v("1.pull-to-refresh.")]),t._v(" "),e("h2",{attrs:{id:"masonry"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#masonry"}},[t._v("#")]),t._v(" Masonry")]),t._v(" "),e("p",[t._v("布局框架")]),t._v(" "),e("h1",{attrs:{id:"常见问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常见问题"}},[t._v("#")]),t._v(" 常见问题")]),t._v(" "),e("p",[t._v("![image-20200310194846430](/Users/keyang/Library/Application Support/typora-user-images/image-20200310194846430.png)")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2020-03-10-114836.png",alt:"image-20200310194836422"}})])])}),[],!1,null,null,null);a.default=n.exports}}]);