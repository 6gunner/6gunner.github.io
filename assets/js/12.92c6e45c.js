(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{373:function(t,n,i){"use strict";i.r(n);var e=i(25),s=Object(e.a)({},(function(){var t=this,n=t.$createElement,i=t._self._c||n;return i("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[i("h1",{attrs:{id:"_1-配置gitlab钩子"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_1-配置gitlab钩子"}},[t._v("#")]),t._v(" 1.配置gitlab钩子")]),t._v(" "),i("p",[i("strong",[t._v("1.打开"),i("code",[t._v("Settings/Intergrations")]),t._v("，准备配置url和token。")])]),t._v(" "),i("p",[i("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2020-03-11-015510.png",alt:"image-20200311095509685"}})]),t._v(" "),i("p",[i("strong",[t._v("2.获取url和token")])]),t._v(" "),i("p",[t._v("​\t打开jenkins，找到job，点击配置")]),t._v(" "),i("p",[t._v("​\t勾选下面的触发器选项"),i("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2020-03-11-020128.png",alt:"image-20200311100128281"}})]),t._v(" "),i("p",[t._v("​\t点击生成secert token")]),t._v(" "),i("p",[i("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2020-03-11-020207.png",alt:"image-20200311100207832"}})]),t._v(" "),i("p",[t._v("​\t复制生成得到的secret token以及上面出现的url，到第一步的位置")]),t._v(" "),i("p",[i("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2020-03-11-020556.png",alt:"image-20200311100556367"}})]),t._v(" "),i("p",[t._v("保存")]),t._v(" "),i("p",[t._v("配置完成")]),t._v(" "),i("h1",{attrs:{id:"_2-cicd流程"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_2-cicd流程"}},[t._v("#")]),t._v(" 2.CICD流程")]),t._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[t._v('#image: gunner6/hello-ngnx\n\n# 理解为阶段，相同阶段，并行执行；不同阶段，按先后顺序执行\nstages:\n  - pre_build\n  - test\n  - build\n  - deploy\n\nbefore_script:\n  stage: pre_build\n  script:\n    - yarn install\n\nlint:\n  stage: test\n  script:\n  - npm run lint\n\nbuild_dev:\n  stage: build\n  only: # 此job匹配哪个branch或者tag或者trigger\n    - develop #只匹配develop分支\n  script:\n    - echo "done"\n\npublish_build:\n  stage: deploy\n  script:\n    - npm run build\n    - docker build -t dva-demo .\n')])])]),i("p",[t._v("1.创建"),i("code",[t._v("feature/bhop")]),t._v("分支")]),t._v(" "),i("p",[t._v("2.push分支")]),t._v(" "),i("p",[t._v("3.触发pipeline流水线 (最后一个)")]),t._v(" "),i("p",[i("img",{attrs:{src:"https://ipic-coda.oss-cn-beijing.aliyuncs.com/2020-04-23-071759.png",alt:"image-20200423151758431"}})]),t._v(" "),i("p",[t._v("4.流水线分三个stage")]),t._v(" "),i("ul",[i("li",[t._v("build")]),t._v(" "),i("li",[t._v("docker-build")]),t._v(" "),i("li",[t._v("deploy")])]),t._v(" "),i("p",[t._v("4.1 build操作时将从git上clone分支，然后运行 npm install && npm run build")]),t._v(" "),i("p",[t._v("4.2 docker-build：")]),t._v(" "),i("ul",[i("li",[t._v("先登录docker用户")]),t._v(" "),i("li",[t._v("然后拉取nginx镜像")]),t._v(" "),i("li",[t._v("将build生成的目录copy到/bh/www目录")]),t._v(" "),i("li",[t._v("暴露端口 80和443")]),t._v(" "),i("li",[t._v("copy nginx配置文件")]),t._v(" "),i("li",[t._v("打包成image")])]),t._v(" "),i("p",[t._v("4.3 deploy 将image发布到pod上。 // 这个还要研究下在干嘛")])])}),[],!1,null,null,null);n.default=s.exports}}]);