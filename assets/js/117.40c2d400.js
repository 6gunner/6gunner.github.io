(window.webpackJsonp=window.webpackJsonp||[]).push([[117],{477:function(t,s,a){"use strict";a.r(s);var n=a(25),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"dummy节点的使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dummy节点的使用"}},[t._v("#")]),t._v(" dummy节点的使用")]),t._v(" "),a("p",[t._v("为什么需要dummy节点？")]),t._v(" "),a("p",[t._v("第一种情况，将dummy作为新链表的头部节点。")]),t._v(" "),a("p",[t._v("例题：21 https://leetcode-cn.com/problems/merge-two-sorted-lists/")]),t._v(" "),a("p",[t._v("例题：2 https://leetcode-cn.com/problems/add-two-numbers/")]),t._v(" "),a("p",[t._v("可以减少重复的代码逻辑，很灵巧的解决链表头部不好赋值的问题。")]),t._v(" "),a("p",[t._v("第二种情况，解决链表头部的极端情况")]),t._v(" "),a("p",[t._v("例题：19 https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/")]),t._v(" "),a("p",[t._v("如果链表一共有n个节点，然后需要删除倒数第n个节点。那就意味着，链表的第一个节点肯定要被删除。")]),t._v(" "),a("p",[t._v("所以我们定义一个dummy节点，作为链表的头节点，这样就不用去对第一个节点被删除再处理一遍逻辑了。")]),t._v(" "),a("h2",{attrs:{id:"递归的使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#递归的使用"}},[t._v("#")]),t._v(" 递归的使用")]),t._v(" "),a("p",[t._v("例题：24 https://leetcode-cn.com/problems/swap-nodes-in-pairs/")]),t._v(" "),a("p",[a("img",{attrs:{src:"/Users/keyang/notes/docs/%E7%AE%97%E6%B3%95%E9%A2%98/IMG_0042.jpg",alt:"IMG_0042"}})]),t._v(" "),a("p",[t._v("递归的方法，结合dummy的虚拟节点")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将head和head.next进行替换")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("swap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("prev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" head")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v("（head "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" cnext "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将head.next 重新指向")]),t._v("\n  head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cnext"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  cnext"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  prev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cnext"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  \n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 递归")]),t._v("\n  prev "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  head "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("swap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("strong",[t._v("终止条件")])]),t._v(" "),a("p",[t._v("head 为空指针或者 next 为空指针，也就是当前无节点或者只有一个节点，无法进行交换")]),t._v(" "),a("p",[a("strong",[t._v("总结")])]),t._v(" "),a("p",[t._v("这个算法题，一开始，我没考虑到递归的算法。")]),t._v(" "),a("p",[t._v("我考虑的是用一个临时变量 "),a("code",[t._v("i")]),t._v("来存储链表循环的次数。")]),t._v(" "),a("p",[t._v("如果"),a("code",[t._v("i")]),t._v("是奇数的话，我认为达到了需要替换的时候。然后将奇数前一个节点进行替换。")]),t._v(" "),a("p",[t._v("看了别人的解答，发现实际上这个"),a("code",[t._v("i")]),t._v("是多余的，因为我就直接从0开始替换就好了。将head和head>next替换完，然后去替换下一head和head>next;")])])}),[],!1,null,null,null);s.default=e.exports}}]);