(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{427:function(t,a,s){"use strict";s.r(a);var e=s(25),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"单元测试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#单元测试"}},[t._v("#")]),t._v(" 单元测试")]),t._v(" "),s("blockquote",[s("p",[t._v("https://github.com/ChrisZou/android-unit-testing-tutorial")]),t._v(" "),s("p",[t._v("https://blog.csdn.net/qq_17766199/article/details/78243176")]),t._v(" "),s("p",[t._v("https://github.com/simplezhli/AndroidUT/blob/androidx/app/src/test/java/com/zl/weilu/androidut/mvp/LoginPresenterTest.java")])]),t._v(" "),s("p",[t._v("几个基本技术：JUnit4 + Mockito + Dagger2 + Robolectric。基本来说，并没有什么黑科技，都是业界标准。")]),t._v(" "),s("h2",{attrs:{id:"测试分类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#测试分类"}},[t._v("#")]),t._v(" 测试分类")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("单元测试（Junit4、Mockito、PowerMockito、Robolectric）\nUI测试（Espresso、UI Automator）\n压力测试（Monkey）\n")])])]),s("p",[t._v("测试代码结构：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("app/src\n     ├── androidTestjava (仪器化单元测试、UI测试)\n     ├── main/java (业务代码)\n     └── test/java  (本地单元测试)\n")])])]),s("ul",[s("li",[t._v("testImplementation : adds dependency for "),s("code",[t._v("test")]),t._v(" source set")]),t._v(" "),s("li",[t._v("androidTestImplementation : adds dependency for "),s("code",[t._v("androidTest")]),t._v(" source set")])]),t._v(" "),s("h2",{attrs:{id:"测试哪些东西？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#测试哪些东西？"}},[t._v("#")]),t._v(" 测试哪些东西？")]),t._v(" "),s("ol",[s("li",[t._v("所有的Model、Presenter/ViewModel、Api、Utils等类的public方法")]),t._v(" "),s("li",[t._v("Bean类getter、setter、toString、hashCode等一动生成的方法除外，其他的逻辑部分需要测试。")]),t._v(" "),s("li",[t._v("自定义View的功能：比如set data以后，text有没有显示出来等等。简单的交互，比如click事件。但是负责的交互一般不测，比如touch、滑动事件等等。")]),t._v(" "),s("li",[t._v("Activity的主要功能：比如view是不是存在、显示数据、错误信息、简单的点击事件等。比较复杂的用户交互比如onTouch，以及view的样式、位置等等可以不测。因为不好测。")])]),t._v(" "),s("h3",{attrs:{id:"怎么去写测试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#怎么去写测试"}},[t._v("#")]),t._v(" 怎么去写测试")]),t._v(" "),s("p",[t._v("一个类的方法可以分为两种，一种是有返回值的，另一种是没有返回值的。对于有返回值的方法，我们要测起来比较容易，就跟上面的"),s("code",[t._v("Calculator")]),t._v("例子那样，输入相应的参数，得到相应的返回值，然后验证得到的返回值跟我们预期的值一样，就好了。\n但是没有返回值的方法，要怎么测试呢？比如说刚刚login的例子，点击那个按钮，会执行Activity的"),s("code",[t._v("login()")]),t._v("方法，它的定义如下：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("login")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" username "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//get username from username EditText")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" password "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//get password from password EditText")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//do other operation like validation, etc")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n\n    mUserManager"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("performlogin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("username"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" password"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("这个方法是void的，那么怎么验证这个方法是正确的呢？其实仔细想想，这个方法也是有输出的，它的输出就是，调用了"),s("code",[t._v("mUserManager")]),t._v("的"),s("code",[t._v("performLogin")]),t._v("方法，同时传给他两个参数。所以只要验证"),s("code",[t._v("mUserManager")]),t._v("的"),s("code",[t._v("performLogin")]),t._v("方法得到了调用，同时传给他的参数是正确的，就说明这个方法是能正常工作的。")]),t._v(" "),s("h2",{attrs:{id:"测试框架"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#测试框架"}},[t._v("#")]),t._v(" 测试框架")]),t._v(" "),s("h3",{attrs:{id:"robolectric框架"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#robolectric框架"}},[t._v("#")]),t._v(" robolectric框架")]),t._v(" "),s("p",[t._v("https://maxwell-nc.github.io/android/robolectricTest.html")]),t._v(" "),s("h4",{attrs:{id:"怎么在robolectric里获取context"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#怎么在robolectric里获取context"}},[t._v("#")]),t._v(" 怎么在robolectric里获取context")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Preferences")]),t._v(" preferences "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Preferences")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getInstance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ApplicationProvider")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getApplicationContext")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h3",{attrs:{id:"powermock"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#powermock"}},[t._v("#")]),t._v(" PowerMock")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@RunWith")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PowerMockRunner")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@PrepareForTest")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CodeUtils")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);